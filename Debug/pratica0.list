
pratica0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c4  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080016f4  080016f4  000026f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001714  08001714  00003028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001714  08001714  00003028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001714  08001714  00003028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001714  08001714  00002714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001718  08001718  00002718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800171c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000028  08001744  00003028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001744  00003094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c5f  00000000  00000000  00003051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd1  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00006c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ef  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041e7  00000000  00000000  00007397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000422c  00000000  00000000  0000b57e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00012e09  00000000  00000000  0000f7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000225b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cf0  00000000  00000000  000225f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000232e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	080016dc 	.word	0x080016dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	080016dc 	.word	0x080016dc

08000170 <SysTick_Handler>:
extern volatile unsigned char g_dma_tx_complete;
extern volatile unsigned char g_dma_rx_complete;
extern volatile unsigned int state_listenig_timeout;

void __attribute__((weak)) SysTick_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	state_listenig_timeout = 1;
 8000174:	4b03      	ldr	r3, [pc, #12]	@ (8000184 <SysTick_Handler+0x14>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
	//systick_set_timeout();
	//systick_isr_callback();
	//systick_set_flag();
	//tg=systick_get_tick();
	//systick_inc_tick();
}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000004c 	.word	0x2000004c

08000188 <EXTI0_IRQHandler>:

/* EXTI Line0 interrupt                             */
void EXTI0_IRQHandler(void){
 8000188:	b480      	push	{r7}
 800018a:	af00      	add	r7, sp, #0

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr

08000194 <EXTI1_IRQHandler>:

/* EXTI Line1 interrupt                             */
void EXTI1_IRQHandler(void){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0

}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr

080001a0 <EXTI2_IRQHandler>:

/* EXTI Line2 interrupt                             */
void EXTI2_IRQHandler(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	gpio_isr_nrfirq_callback();
 80001a4:	f000 fb14 	bl	80007d0 <gpio_isr_nrfirq_callback>
}
 80001a8:	bf00      	nop
 80001aa:	bd80      	pop	{r7, pc}

080001ac <EXTI3_IRQHandler>:

/* EXTI Line3 interrupt                             */
void EXTI3_IRQHandler(void){
 80001ac:	b480      	push	{r7}
 80001ae:	af00      	add	r7, sp, #0

}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr

080001b8 <EXTI4_IRQHandler>:

/* EXTI Line4 interrupt                             */
void EXTI4_IRQHandler(void){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0

}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr

080001c4 <DMA1_Channel2_IRQHandler>:

void __attribute__((weak)) DMA1_Channel2_IRQHandler(void){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

	if((HW_REG(DMA1+DMA_ISR)>>4) & DMA_ISR_HTIFx){
 80001c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000208 <DMA1_Channel2_IRQHandler+0x44>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d005      	beq.n	80001e0 <DMA1_Channel2_IRQHandler+0x1c>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CHTIFx<<4;
 80001d4:	4b0d      	ldr	r3, [pc, #52]	@ (800020c <DMA1_Channel2_IRQHandler+0x48>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0c      	ldr	r2, [pc, #48]	@ (800020c <DMA1_Channel2_IRQHandler+0x48>)
 80001da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80001de:	6013      	str	r3, [r2, #0]
	}

	if((HW_REG(DMA1+DMA_ISR)>>4) & DMA_ISR_TCIFx){
 80001e0:	4b09      	ldr	r3, [pc, #36]	@ (8000208 <DMA1_Channel2_IRQHandler+0x44>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f003 0320 	and.w	r3, r3, #32
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d008      	beq.n	80001fe <DMA1_Channel2_IRQHandler+0x3a>
		//HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
		//for(volatile int i = 0;i<200000;i++);

		g_dma_rx_complete = 1;
 80001ec:	4b08      	ldr	r3, [pc, #32]	@ (8000210 <DMA1_Channel2_IRQHandler+0x4c>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]

		//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// RX

		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CTCIFx<<4;
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DMA1_Channel2_IRQHandler+0x48>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a05      	ldr	r2, [pc, #20]	@ (800020c <DMA1_Channel2_IRQHandler+0x48>)
 80001f8:	f043 0320 	orr.w	r3, r3, #32
 80001fc:	6013      	str	r3, [r2, #0]
	}
}
 80001fe:	bf00      	nop
 8000200:	46bd      	mov	sp, r7
 8000202:	bc80      	pop	{r7}
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40020000 	.word	0x40020000
 800020c:	40020004 	.word	0x40020004
 8000210:	20000045 	.word	0x20000045

08000214 <DMA1_Channel3_IRQHandler>:

void __attribute__((weak)) DMA1_Channel3_IRQHandler(void){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0

	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_HTIFx){
 8000218:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <DMA1_Channel3_IRQHandler+0x44>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000220:	2b00      	cmp	r3, #0
 8000222:	d005      	beq.n	8000230 <DMA1_Channel3_IRQHandler+0x1c>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CHTIFx<<8;
 8000224:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <DMA1_Channel3_IRQHandler+0x48>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0c      	ldr	r2, [pc, #48]	@ (800025c <DMA1_Channel3_IRQHandler+0x48>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800022e:	6013      	str	r3, [r2, #0]
	}

	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_TCIFx){
 8000230:	4b09      	ldr	r3, [pc, #36]	@ (8000258 <DMA1_Channel3_IRQHandler+0x44>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000238:	2b00      	cmp	r3, #0
 800023a:	d008      	beq.n	800024e <DMA1_Channel3_IRQHandler+0x3a>
		//HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
		//for(volatile int i = 0;i<200000;i++);
		g_dma_tx_complete = 1;
 800023c:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <DMA1_Channel3_IRQHandler+0x4c>)
 800023e:	2201      	movs	r2, #1
 8000240:	701a      	strb	r2, [r3, #0]

		//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// TX

		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CTCIFx<<8;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <DMA1_Channel3_IRQHandler+0x48>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a05      	ldr	r2, [pc, #20]	@ (800025c <DMA1_Channel3_IRQHandler+0x48>)
 8000248:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800024c:	6013      	str	r3, [r2, #0]
	}
}
 800024e:	bf00      	nop
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40020000 	.word	0x40020000
 800025c:	40020004 	.word	0x40020004
 8000260:	20000044 	.word	0x20000044

08000264 <SPI1_IRQHandler>:

void __attribute__((weak)) SPI1_IRQHandler(void){
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <EXTI9_5_IRQHandler>:

/* EXTI Line[9:5] interrupts                        */
void EXTI9_5_IRQHandler(void){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <EXTI15_10_IRQHandler>:

/* EXTI Line[15:10] interrupts                      */
void EXTI15_10_IRQHandler(void){
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <RTCAlarm_IRQHandler>:

void  __attribute__((weak)) RTCAlarm_IRQHandler(void){
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	if (HW_REG(RTC+RTC_CRL) & RTC_CRL_ALRF){
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0302 	and.w	r3, r3, #2
 8000294:	2b00      	cmp	r3, #0
 8000296:	d033      	beq.n	8000300 <RTCAlarm_IRQHandler+0x78>

		//HW_REG(GPIO_C+GPIOx_BSRR) |= (1<<13);	//Reset C13
		//for(volatile int i=0;i<100000;i++);

		{
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 8000298:	bf00      	nop
 800029a:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f003 0320 	and.w	r3, r3, #32
 80002a2:	2b20      	cmp	r3, #32
 80002a4:	d1f9      	bne.n	800029a <RTCAlarm_IRQHandler+0x12>
			HW_REG(RTC+RTC_CRL) |= (ENTER_CONFIGURATION_MODE); //To write RTC_PRL, RTC_CNT, RTC_ALR
 80002a6:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a17      	ldr	r2, [pc, #92]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002ac:	f043 0310 	orr.w	r3, r3, #16
 80002b0:	6013      	str	r3, [r2, #0]

			//HW_REG(RTC+RTC_CNTH) = 0;	//RW
			//HW_REG(RTC+RTC_CNTL) = 0;	//RW

			HW_REG(RTC+RTC_ALRH) = 0;	//Only Write
 80002b2:	4b16      	ldr	r3, [pc, #88]	@ (800030c <RTCAlarm_IRQHandler+0x84>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
			HW_REG(RTC+RTC_ALRL) = HW_REG(RTC+RTC_ALRL) + 1;	//Only Write
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <RTCAlarm_IRQHandler+0x88>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <RTCAlarm_IRQHandler+0x88>)
 80002be:	3301      	adds	r3, #1
 80002c0:	6013      	str	r3, [r2, #0]

			HW_REG(RTC+RTC_CRL) &= ~(ENTER_CONFIGURATION_MODE);
 80002c2:	4b11      	ldr	r3, [pc, #68]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002c8:	f023 0310 	bic.w	r3, r3, #16
 80002cc:	6013      	str	r3, [r2, #0]
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 80002ce:	bf00      	nop
 80002d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f003 0320 	and.w	r3, r3, #32
 80002d8:	2b20      	cmp	r3, #32
 80002da:	d1f9      	bne.n	80002d0 <RTCAlarm_IRQHandler+0x48>
		}

		HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a09      	ldr	r2, [pc, #36]	@ (8000308 <RTCAlarm_IRQHandler+0x80>)
 80002e2:	f023 0302 	bic.w	r3, r3, #2
 80002e6:	6013      	str	r3, [r2, #0]
		HW_REG(EXTI+EXTI_PR) |= (1<<17);
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <RTCAlarm_IRQHandler+0x8c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a09      	ldr	r2, [pc, #36]	@ (8000314 <RTCAlarm_IRQHandler+0x8c>)
 80002ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002f2:	6013      	str	r3, [r2, #0]
		HW_REG(RTC+RTC_CRH) |= RTC_CRH_ALRIE;
 80002f4:	4b08      	ldr	r3, [pc, #32]	@ (8000318 <RTCAlarm_IRQHandler+0x90>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a07      	ldr	r2, [pc, #28]	@ (8000318 <RTCAlarm_IRQHandler+0x90>)
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6013      	str	r3, [r2, #0]
	}
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40002804 	.word	0x40002804
 800030c:	40002820 	.word	0x40002820
 8000310:	40002824 	.word	0x40002824
 8000314:	40010414 	.word	0x40010414
 8000318:	40002800 	.word	0x40002800

0800031c <afio_init_config>:
#include "RCC_utils.h"

#define PA							(0xF)
#define AFIO_EXTICR1_EXTI2			(PA << 8)

void afio_init_config(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB2(RCC_APB2ENR_AFIOEN_CLOCK_ENABLE);
 8000320:	4b0d      	ldr	r3, [pc, #52]	@ (8000358 <afio_init_config+0x3c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0c      	ldr	r2, [pc, #48]	@ (8000358 <afio_init_config+0x3c>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6013      	str	r3, [r2, #0]
	//Set pin alternate function Remap default
	HW_REG(AFIO+AFIO_MAPR) &= ~AFIO_MAPR_SPI1_REMAP;
 800032c:	4b0b      	ldr	r3, [pc, #44]	@ (800035c <afio_init_config+0x40>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0a      	ldr	r2, [pc, #40]	@ (800035c <afio_init_config+0x40>)
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6013      	str	r3, [r2, #0]
	HW_REG(AFIO+AFIO_MAPR) &= ~AFIO_MAPR_I2C1_REMAP;
 8000338:	4b08      	ldr	r3, [pc, #32]	@ (800035c <afio_init_config+0x40>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a07      	ldr	r2, [pc, #28]	@ (800035c <afio_init_config+0x40>)
 800033e:	f023 0302 	bic.w	r3, r3, #2
 8000342:	6013      	str	r3, [r2, #0]

	HW_REG(AFIO+AFIO_EXTICR1) &= ~AFIO_EXTICR1_EXTI2; // PA[2]
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <afio_init_config+0x44>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <afio_init_config+0x44>)
 800034a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021018 	.word	0x40021018
 800035c:	40010004 	.word	0x40010004
 8000360:	40010008 	.word	0x40010008

08000364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	2b00      	cmp	r3, #0
 8000374:	db0b      	blt.n	800038e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	f003 021f 	and.w	r2, r3, #31
 800037c:	4906      	ldr	r1, [pc, #24]	@ (8000398 <__NVIC_EnableIRQ+0x34>)
 800037e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000382:	095b      	lsrs	r3, r3, #5
 8000384:	2001      	movs	r0, #1
 8000386:	fa00 f202 	lsl.w	r2, r0, r2
 800038a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	e000e100 	.word	0xe000e100

0800039c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	6039      	str	r1, [r7, #0]
 80003a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	db0a      	blt.n	80003c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	490c      	ldr	r1, [pc, #48]	@ (80003e8 <__NVIC_SetPriority+0x4c>)
 80003b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ba:	0112      	lsls	r2, r2, #4
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	440b      	add	r3, r1
 80003c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c4:	e00a      	b.n	80003dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	b2da      	uxtb	r2, r3
 80003ca:	4908      	ldr	r1, [pc, #32]	@ (80003ec <__NVIC_SetPriority+0x50>)
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	f003 030f 	and.w	r3, r3, #15
 80003d2:	3b04      	subs	r3, #4
 80003d4:	0112      	lsls	r2, r2, #4
 80003d6:	b2d2      	uxtb	r2, r2
 80003d8:	440b      	add	r3, r1
 80003da:	761a      	strb	r2, [r3, #24]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	e000e100 	.word	0xe000e100
 80003ec:	e000ed00 	.word	0xe000ed00

080003f0 <dma_init_config>:
		HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;

volatile unsigned char g_dma_tx_complete;
volatile unsigned char g_dma_rx_complete;

void dma_init_config(){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_AHB(RCC_AHBENR_DMA1EN_CLOCK_ENABLE);
 80003f4:	4b3d      	ldr	r3, [pc, #244]	@ (80004ec <dma_init_config+0xfc>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a3c      	ldr	r2, [pc, #240]	@ (80004ec <dma_init_config+0xfc>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]

	// SPI1_RX
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2));
 8000400:	4b3b      	ldr	r3, [pc, #236]	@ (80004f0 <dma_init_config+0x100>)
 8000402:	681b      	ldr	r3, [r3, #0]
	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_TEIE_INTERUPT_ENABLE;
	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_HTIE_INTERUPT_ENABLE;
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_TCIE_INTERUPT_ENABLE;
 8000404:	4b3a      	ldr	r3, [pc, #232]	@ (80004f0 <dma_init_config+0x100>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a39      	ldr	r2, [pc, #228]	@ (80004f0 <dma_init_config+0x100>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_DIR_FROM_MEMORY;	//Read from peripheral
 8000410:	4b37      	ldr	r3, [pc, #220]	@ (80004f0 <dma_init_config+0x100>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a36      	ldr	r2, [pc, #216]	@ (80004f0 <dma_init_config+0x100>)
 8000416:	f023 0310 	bic.w	r3, r3, #16
 800041a:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~MEMORY_SIZE;	// 8 bits
 800041c:	4b34      	ldr	r3, [pc, #208]	@ (80004f0 <dma_init_config+0x100>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a33      	ldr	r2, [pc, #204]	@ (80004f0 <dma_init_config+0x100>)
 8000422:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000426:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~PERIPHERAL_SIZE;
 8000428:	4b31      	ldr	r3, [pc, #196]	@ (80004f0 <dma_init_config+0x100>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a30      	ldr	r2, [pc, #192]	@ (80004f0 <dma_init_config+0x100>)
 800042e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000432:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_MEM2MEM_ENABLE;
 8000434:	4b2e      	ldr	r3, [pc, #184]	@ (80004f0 <dma_init_config+0x100>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a2d      	ldr	r2, [pc, #180]	@ (80004f0 <dma_init_config+0x100>)
 800043a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800043e:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~CHANNEL_PRIORITY_LOW;	// PL = 0
 8000440:	4b2b      	ldr	r3, [pc, #172]	@ (80004f0 <dma_init_config+0x100>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a2a      	ldr	r2, [pc, #168]	@ (80004f0 <dma_init_config+0x100>)
 8000446:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800044a:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_MINC_ENABLE;
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_PINC_ENABLE;
 800044c:	4b28      	ldr	r3, [pc, #160]	@ (80004f0 <dma_init_config+0x100>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a27      	ldr	r2, [pc, #156]	@ (80004f0 <dma_init_config+0x100>)
 8000452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000456:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_CIRC_ENABLE;
 8000458:	4b25      	ldr	r3, [pc, #148]	@ (80004f0 <dma_init_config+0x100>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a24      	ldr	r2, [pc, #144]	@ (80004f0 <dma_init_config+0x100>)
 800045e:	f023 0320 	bic.w	r3, r3, #32
 8000462:	6013      	str	r3, [r2, #0]
	// SPI1_RX

	// SPI1_TX
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3));
 8000464:	4b23      	ldr	r3, [pc, #140]	@ (80004f4 <dma_init_config+0x104>)
 8000466:	681b      	ldr	r3, [r3, #0]
	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_TEIE_INTERUPT_ENABLE;
	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_HTIE_INTERUPT_ENABLE;
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_TCIE_INTERUPT_ENABLE;
 8000468:	4b22      	ldr	r3, [pc, #136]	@ (80004f4 <dma_init_config+0x104>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a21      	ldr	r2, [pc, #132]	@ (80004f4 <dma_init_config+0x104>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_DIR_FROM_MEMORY;	//Read from peripheral
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_DIR_FROM_MEMORY;	//Read from memory
 8000474:	4b1f      	ldr	r3, [pc, #124]	@ (80004f4 <dma_init_config+0x104>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1e      	ldr	r2, [pc, #120]	@ (80004f4 <dma_init_config+0x104>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~MEMORY_SIZE;
 8000480:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <dma_init_config+0x104>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a1b      	ldr	r2, [pc, #108]	@ (80004f4 <dma_init_config+0x104>)
 8000486:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800048a:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~PERIPHERAL_SIZE;
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <dma_init_config+0x104>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a18      	ldr	r2, [pc, #96]	@ (80004f4 <dma_init_config+0x104>)
 8000492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000496:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_MEM2MEM_ENABLE;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <dma_init_config+0x104>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <dma_init_config+0x104>)
 800049e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80004a2:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~CHANNEL_PRIORITY_LOW;	// PL = 0
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <dma_init_config+0x104>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a12      	ldr	r2, [pc, #72]	@ (80004f4 <dma_init_config+0x104>)
 80004aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004ae:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_MINC_ENABLE;
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_PINC_ENABLE;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <dma_init_config+0x104>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <dma_init_config+0x104>)
 80004b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ba:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_CIRC_ENABLE;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <dma_init_config+0x104>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	@ (80004f4 <dma_init_config+0x104>)
 80004c2:	f023 0320 	bic.w	r3, r3, #32
 80004c6:	6013      	str	r3, [r2, #0]
	// SPI1_RX

	NVIC_SetPriority(DMA1_Channel3_IRQ,0x10); // Priority level 1
 80004c8:	2110      	movs	r1, #16
 80004ca:	200d      	movs	r0, #13
 80004cc:	f7ff ff66 	bl	800039c <__NVIC_SetPriority>
	NVIC_SetPriority(DMA1_Channel2_IRQ,0x10); // Priority level 1
 80004d0:	2110      	movs	r1, #16
 80004d2:	200c      	movs	r0, #12
 80004d4:	f7ff ff62 	bl	800039c <__NVIC_SetPriority>

	NVIC_EnableIRQ(DMA1_Channel3_IRQ);	// Enable EXTI17 interrupt on NVIC
 80004d8:	200d      	movs	r0, #13
 80004da:	f7ff ff43 	bl	8000364 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Channel2_IRQ);	// Enable EXTI17 interrupt on NVIC
 80004de:	200c      	movs	r0, #12
 80004e0:	f7ff ff40 	bl	8000364 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004e4:	b662      	cpsie	i
}
 80004e6:	bf00      	nop

	__enable_irq();
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40021014 	.word	0x40021014
 80004f0:	4002001c 	.word	0x4002001c
 80004f4:	40020030 	.word	0x40020030

080004f8 <spi_transmit_dma>:
	HW_REG(DMA1+DMA_CMARx(dmaa_channel)) = memory_addr;

	HW_REG(DMA1+DMA_CCRx(dmaa_channel)) |= DMA_CCRx_EN_CHANNEL_ENABLE;
}

void spi_transmit_dma(unsigned int peripheral_addr, unsigned int tx_data_memory_addr, unsigned int rx_data_memory_addr, unsigned short int data_size){
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	807b      	strh	r3, [r7, #2]
	g_dma_tx_complete = 0;
 8000506:	4b22      	ldr	r3, [pc, #136]	@ (8000590 <spi_transmit_dma+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// TX
 800050c:	4b21      	ldr	r3, [pc, #132]	@ (8000594 <spi_transmit_dma+0x9c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a20      	ldr	r2, [pc, #128]	@ (8000594 <spi_transmit_dma+0x9c>)
 8000512:	f023 0301 	bic.w	r3, r3, #1
 8000516:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// RX
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <spi_transmit_dma+0xa0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a1e      	ldr	r2, [pc, #120]	@ (8000598 <spi_transmit_dma+0xa0>)
 800051e:	f023 0301 	bic.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CNDTRx(dmaa_channel)) &= ~0x0000FFFF;
	HW_REG(DMA1+DMA_CNDTRx(DMA_CHANNEL3)) = data_size;
 8000524:	4a1d      	ldr	r2, [pc, #116]	@ (800059c <spi_transmit_dma+0xa4>)
 8000526:	887b      	ldrh	r3, [r7, #2]
 8000528:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CPARx(DMA_CHANNEL3)) = peripheral_addr;
 800052a:	4a1d      	ldr	r2, [pc, #116]	@ (80005a0 <spi_transmit_dma+0xa8>)
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CMARx(DMA_CHANNEL3)) = tx_data_memory_addr;
 8000530:	4a1c      	ldr	r2, [pc, #112]	@ (80005a4 <spi_transmit_dma+0xac>)
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_MINC_ENABLE;	// Inc TX
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <spi_transmit_dma+0x9c>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <spi_transmit_dma+0x9c>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000540:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CNDTRx(dmaa_channel)) &= ~0x0000FFFF;
	HW_REG(DMA1+DMA_CNDTRx(DMA_CHANNEL2)) = data_size;
 8000542:	4a19      	ldr	r2, [pc, #100]	@ (80005a8 <spi_transmit_dma+0xb0>)
 8000544:	887b      	ldrh	r3, [r7, #2]
 8000546:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CPARx(DMA_CHANNEL2)) = peripheral_addr;
 8000548:	4a18      	ldr	r2, [pc, #96]	@ (80005ac <spi_transmit_dma+0xb4>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CMARx(DMA_CHANNEL2)) = rx_data_memory_addr;
 800054e:	4a18      	ldr	r2, [pc, #96]	@ (80005b0 <spi_transmit_dma+0xb8>)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_MINC_ENABLE;	// Fix RX
 8000554:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <spi_transmit_dma+0xa0>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0f      	ldr	r2, [pc, #60]	@ (8000598 <spi_transmit_dma+0xa0>)
 800055a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800055e:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_EN_CHANNEL_ENABLE;	// Rx
 8000560:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <spi_transmit_dma+0xa0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0c      	ldr	r2, [pc, #48]	@ (8000598 <spi_transmit_dma+0xa0>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_EN_CHANNEL_ENABLE;	// TX
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <spi_transmit_dma+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <spi_transmit_dma+0x9c>)
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

	while (g_dma_tx_complete == 0) {};
 8000578:	bf00      	nop
 800057a:	4b05      	ldr	r3, [pc, #20]	@ (8000590 <spi_transmit_dma+0x98>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0fa      	beq.n	800057a <spi_transmit_dma+0x82>
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	20000044 	.word	0x20000044
 8000594:	40020030 	.word	0x40020030
 8000598:	4002001c 	.word	0x4002001c
 800059c:	40020034 	.word	0x40020034
 80005a0:	40020038 	.word	0x40020038
 80005a4:	4002003c 	.word	0x4002003c
 80005a8:	40020020 	.word	0x40020020
 80005ac:	40020024 	.word	0x40020024
 80005b0:	40020028 	.word	0x40020028

080005b4 <spi_receive_dma>:

void spi_receive_dma(unsigned int peripheral_addr, unsigned int tx_data_memory_addr, unsigned int rx_data_memory_addr, unsigned short int data_size){
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
 80005c0:	807b      	strh	r3, [r7, #2]
	g_dma_rx_complete = 0;
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <spi_receive_dma+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// TX
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <spi_receive_dma+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a20      	ldr	r2, [pc, #128]	@ (8000650 <spi_receive_dma+0x9c>)
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) &= ~DMA_CCRx_EN_CHANNEL_ENABLE;	// RX
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <spi_receive_dma+0xa0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1e      	ldr	r2, [pc, #120]	@ (8000654 <spi_receive_dma+0xa0>)
 80005da:	f023 0301 	bic.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CNDTRx(dmaa_channel)) &= ~0x0000FFFF;
	HW_REG(DMA1+DMA_CNDTRx(DMA_CHANNEL3)) = data_size;
 80005e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <spi_receive_dma+0xa4>)
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CPARx(DMA_CHANNEL3)) = peripheral_addr;
 80005e6:	4a1d      	ldr	r2, [pc, #116]	@ (800065c <spi_receive_dma+0xa8>)
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CMARx(DMA_CHANNEL3)) = tx_data_memory_addr;
 80005ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000660 <spi_receive_dma+0xac>)
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) &= ~DMA_CCRx_MINC_ENABLE;	// Fix TX
 80005f2:	4b17      	ldr	r3, [pc, #92]	@ (8000650 <spi_receive_dma+0x9c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a16      	ldr	r2, [pc, #88]	@ (8000650 <spi_receive_dma+0x9c>)
 80005f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005fc:	6013      	str	r3, [r2, #0]

	//HW_REG(DMA1+DMA_CNDTRx(dmaa_channel)) &= ~0x0000FFFF;
	HW_REG(DMA1+DMA_CNDTRx(DMA_CHANNEL2)) = data_size;
 80005fe:	4a19      	ldr	r2, [pc, #100]	@ (8000664 <spi_receive_dma+0xb0>)
 8000600:	887b      	ldrh	r3, [r7, #2]
 8000602:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CPARx(DMA_CHANNEL2)) = peripheral_addr;
 8000604:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <spi_receive_dma+0xb4>)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CMARx(DMA_CHANNEL2)) = rx_data_memory_addr;
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <spi_receive_dma+0xb8>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_MINC_ENABLE;	// Inc Rx
 8000610:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <spi_receive_dma+0xa0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <spi_receive_dma+0xa0>)
 8000616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061a:	6013      	str	r3, [r2, #0]

	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL2)) |= DMA_CCRx_EN_CHANNEL_ENABLE;	// Rx
 800061c:	4b0d      	ldr	r3, [pc, #52]	@ (8000654 <spi_receive_dma+0xa0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a0c      	ldr	r2, [pc, #48]	@ (8000654 <spi_receive_dma+0xa0>)
 8000622:	f043 0301 	orr.w	r3, r3, #1
 8000626:	6013      	str	r3, [r2, #0]
	HW_REG(DMA1+DMA_CCRx(DMA_CHANNEL3)) |= DMA_CCRx_EN_CHANNEL_ENABLE;	// TX
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <spi_receive_dma+0x9c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <spi_receive_dma+0x9c>)
 800062e:	f043 0301 	orr.w	r3, r3, #1
 8000632:	6013      	str	r3, [r2, #0]

	while (g_dma_rx_complete == 0) {};
 8000634:	bf00      	nop
 8000636:	4b05      	ldr	r3, [pc, #20]	@ (800064c <spi_receive_dma+0x98>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0fa      	beq.n	8000636 <spi_receive_dma+0x82>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr
 800064c:	20000045 	.word	0x20000045
 8000650:	40020030 	.word	0x40020030
 8000654:	4002001c 	.word	0x4002001c
 8000658:	40020034 	.word	0x40020034
 800065c:	40020038 	.word	0x40020038
 8000660:	4002003c 	.word	0x4002003c
 8000664:	40020020 	.word	0x40020020
 8000668:	40020024 	.word	0x40020024
 800066c:	40020028 	.word	0x40020028

08000670 <__NVIC_EnableIRQ>:
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4906      	ldr	r1, [pc, #24]	@ (80006a4 <__NVIC_EnableIRQ+0x34>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <gpio_interrupt_config>:

#define EXTI_IMR_MR2			(0x1 << 2)
#define EXTI_FTSR_TR2			EXTI_IMR_MR2
#define EXTI_PR_PR2				EXTI_IMR_MR2

void gpio_interrupt_config(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HW_REG(EXTI+EXTI_FTSR) |= EXTI_FTSR_TR2;     // Habilita FTSR para EXTI
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <gpio_interrupt_config+0x28>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <gpio_interrupt_config+0x28>)
 80006b2:	f043 0304 	orr.w	r3, r3, #4
 80006b6:	6013      	str	r3, [r2, #0]
	HW_REG(EXTI+EXTI_IMR) |= EXTI_IMR_MR2;     // Habilita EXTI
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <gpio_interrupt_config+0x2c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a05      	ldr	r2, [pc, #20]	@ (80006d4 <gpio_interrupt_config+0x2c>)
 80006be:	f043 0304 	orr.w	r3, r3, #4
 80006c2:	6013      	str	r3, [r2, #0]
	//NVIC_SetPriority(EXTI2_IRQ,0x10); // Priority level 1

	NVIC_EnableIRQ(EXTI2_IRQ);	// Enable EXTI17 interrupt on NVIC
 80006c4:	2008      	movs	r0, #8
 80006c6:	f7ff ffd3 	bl	8000670 <__NVIC_EnableIRQ>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	4001040c 	.word	0x4001040c
 80006d4:	40010400 	.word	0x40010400

080006d8 <gpio_init_config>:

void __attribute__((weak)) gpio_init_config(){
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOCEEN_CLOCK_ENABLE);	//Enable GPIOC Clock
 80006dc:	4b36      	ldr	r3, [pc, #216]	@ (80007b8 <gpio_init_config+0xe0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a35      	ldr	r2, [pc, #212]	@ (80007b8 <gpio_init_config+0xe0>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_BSRR) = PC13;	//Reset C13
 80006e8:	4b34      	ldr	r3, [pc, #208]	@ (80007bc <gpio_init_config+0xe4>)
 80006ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006ee:	601a      	str	r2, [r3, #0]

	//  Analog mode all
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xFFFF);
	//HW_REG(GPIO_C+GPIOx_CRL) &= ~(0xFFFF);

	HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xF<<20);	//Set C13 as Output
 80006f0:	4b33      	ldr	r3, [pc, #204]	@ (80007c0 <gpio_init_config+0xe8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a32      	ldr	r2, [pc, #200]	@ (80007c0 <gpio_init_config+0xe8>)
 80006f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80006fa:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_CRH) |= (0x2<<20);	//Set C13 max speed 2MHz
 80006fc:	4b30      	ldr	r3, [pc, #192]	@ (80007c0 <gpio_init_config+0xe8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <gpio_init_config+0xe8>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000706:	6013      	str	r3, [r2, #0]
	// Exemplo para restaurar pinos PC14/15 ao estado adequado (modo analógico)
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~((0xF << ((14 - 8) * 4)) | (0xF << ((15 - 8) * 4)));
	//HW_REG(GPIO_C+GPIOx_CRH) |= ((0x0 << ((14 - 8) * 4)) | (0x0 << ((15 - 8) * 4))); // Analog input

	// SPI configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOAEEN_CLOCK_ENABLE);	// Enable GPIOA Clock
 8000708:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <gpio_init_config+0xe0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2a      	ldr	r2, [pc, #168]	@ (80007b8 <gpio_init_config+0xe0>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) &= ~(0xFFFFF000);			// Clear CNF and MODE A7-A2
 8000714:	4b2b      	ldr	r3, [pc, #172]	@ (80007c4 <gpio_init_config+0xec>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a2a      	ldr	r2, [pc, #168]	@ (80007c4 <gpio_init_config+0xec>)
 800071a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800071e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_ODR) &= ~PA3;			// Reset A3
 8000720:	4b29      	ldr	r3, [pc, #164]	@ (80007c8 <gpio_init_config+0xf0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a28      	ldr	r2, [pc, #160]	@ (80007c8 <gpio_init_config+0xf0>)
 8000726:	f023 0308 	bic.w	r3, r3, #8
 800072a:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= PA3_CNF_MODE;	// CE
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <gpio_init_config+0xec>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a24      	ldr	r2, [pc, #144]	@ (80007c4 <gpio_init_config+0xec>)
 8000732:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000736:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_CLK;	// CLK Master Alternate function push-pull
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <gpio_init_config+0xec>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a21      	ldr	r2, [pc, #132]	@ (80007c4 <gpio_init_config+0xec>)
 800073e:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 8000742:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MOSI;	// MOSI Full duplex / master Alternate function push-pull
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <gpio_init_config+0xec>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1e      	ldr	r2, [pc, #120]	@ (80007c4 <gpio_init_config+0xec>)
 800074a:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 800074e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MISO;	// MISO Full duplex / master Input floating / Input pull-up
 8000750:	4b1c      	ldr	r3, [pc, #112]	@ (80007c4 <gpio_init_config+0xec>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <gpio_init_config+0xec>)
 8000756:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800075a:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_NSS;	// NSS Software
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <gpio_init_config+0xec>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <gpio_init_config+0xec>)
 8000762:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000766:	6013      	str	r3, [r2, #0]
	// afio_init_config();

	// NRF24L01 configuration
	HW_REG(GPIO_A+GPIOx_CRL) &= ~(0x00000F00);
 8000768:	4b16      	ldr	r3, [pc, #88]	@ (80007c4 <gpio_init_config+0xec>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a15      	ldr	r2, [pc, #84]	@ (80007c4 <gpio_init_config+0xec>)
 800076e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000772:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= PA2_CNF_MODE;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <gpio_init_config+0xec>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <gpio_init_config+0xec>)
 800077a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800077e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_ODR) |= PA2;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <gpio_init_config+0xf0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a10      	ldr	r2, [pc, #64]	@ (80007c8 <gpio_init_config+0xf0>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	6013      	str	r3, [r2, #0]
	//HW_REG(GPIO_B+GPIOx_CRL) |= I2C_CLK;	// I2C clock Alternate function open drain
	//HW_REG(GPIO_B+GPIOx_CRL) |= I2C_SDA;	// I2C Data I/O Alternate function open drain
	// afio_init_config();

	//IR configuration
		ENABLE_CLOCK_APB2(RCC_APB2ENR_IOAEEN_CLOCK_ENABLE);	// Enable GPIOA Clock
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <gpio_init_config+0xe0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a09      	ldr	r2, [pc, #36]	@ (80007b8 <gpio_init_config+0xe0>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6013      	str	r3, [r2, #0]
		HW_REG(GPIO_A + GPIOx_CRH) &= ~((0x3 << 0) | (0x3 << 2));
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <gpio_init_config+0xf4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0b      	ldr	r2, [pc, #44]	@ (80007cc <gpio_init_config+0xf4>)
 800079e:	f023 030f 	bic.w	r3, r3, #15
 80007a2:	6013      	str	r3, [r2, #0]
	//	HW_REG(GPIO_A + GPIOx_CRH) |= (GPIOx_CRLH_MODE_50MHz << 0);   /* MODE8 = 11 (50 MHz) */
	//	HW_REG(GPIO_A + GPIOx_CRH) |= (0b10 << 2); /* CNF8  = 10 (AF‑PP) */
		HW_REG(GPIO_A + GPIOx_CRH) |= IR_ENABLE_PIN;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <gpio_init_config+0xf4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <gpio_init_config+0xf4>)
 80007aa:	f043 030b 	orr.w	r3, r3, #11
 80007ae:	6013      	str	r3, [r2, #0]
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40021018 	.word	0x40021018
 80007bc:	40011010 	.word	0x40011010
 80007c0:	40011004 	.word	0x40011004
 80007c4:	40010800 	.word	0x40010800
 80007c8:	4001080c 	.word	0x4001080c
 80007cc:	40010804 	.word	0x40010804

080007d0 <gpio_isr_nrfirq_callback>:
	HW_REG(GPIO_C+GPIOx_LCKR);			//Read 0
	lock_key = HW_REG(GPIO_C+GPIOx_LCKR) >> 16;	//Read 1 optional
	*/
}

void __attribute__((weak)) gpio_isr_nrfirq_callback(){
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	if (HW_REG(EXTI+EXTI_PR) & EXTI_PR_PR2)
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <gpio_isr_nrfirq_callback+0x30>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d00b      	beq.n	80007f8 <gpio_isr_nrfirq_callback+0x28>
	{
		HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle PC13
 80007e0:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <gpio_isr_nrfirq_callback+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	@ (8000804 <gpio_isr_nrfirq_callback+0x34>)
 80007e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80007ea:	6013      	str	r3, [r2, #0]
		HW_REG(EXTI+EXTI_PR) |= EXTI_PR_PR2;
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <gpio_isr_nrfirq_callback+0x30>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a03      	ldr	r2, [pc, #12]	@ (8000800 <gpio_isr_nrfirq_callback+0x30>)
 80007f2:	f043 0304 	orr.w	r3, r3, #4
 80007f6:	6013      	str	r3, [r2, #0]

	}
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	40010414 	.word	0x40010414
 8000804:	4001100c 	.word	0x4001100c

08000808 <main>:
		{0x04, 0xDD, 0xCC, 0xBB, 0xAA},
		{0x05, 0xDD, 0xCC, 0xBB, 0xAA}
};

int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0f0      	sub	sp, #448	@ 0x1c0
 800080c:	af00      	add	r7, sp, #0
	//DEBUG_MODE_ON();
	//DEBUG_MODE_OFF();

	system_clock_config();
 800080e:	f000 fc63 	bl	80010d8 <system_clock_config>
	gpio_init_config();
 8000812:	f7ff ff61 	bl	80006d8 <gpio_init_config>
	delay_ir_init();
 8000816:	f000 fe53 	bl	80014c0 <delay_ir_init>
	ir_init_pwm();
 800081a:	f000 fc05 	bl	8001028 <ir_init_pwm>
	afio_init_config();
 800081e:	f7ff fd7d 	bl	800031c <afio_init_config>
	gpio_interrupt_config();
 8000822:	f7ff ff41 	bl	80006a8 <gpio_interrupt_config>
	spi_init_config();
 8000826:	f000 fda5 	bl	8001374 <spi_init_config>
	//spi_interrupt_config()
	spi_dma_config();
 800082a:	f000 fd8f 	bl	800134c <spi_dma_config>
	dma_init_config();
 800082e:	f7ff fddf 	bl	80003f0 <dma_init_config>


	ENABLE_SPE_SPI();
 8000832:	4b7c      	ldr	r3, [pc, #496]	@ (8000a24 <main+0x21c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a7b      	ldr	r2, [pc, #492]	@ (8000a24 <main+0x21c>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800083c:	6013      	str	r3, [r2, #0]
	//dma_set_channel_config(2, SPI1+SPI_DR, (unsigned int)tx_data, 12);
	//dma_set_channel_config(2, SPI1+SPI_DR, (unsigned int)rx_data, 12);

	secondary_clock_config();
 800083e:	f000 fc51 	bl	80010e4 <secondary_clock_config>
	//watchdog_init_config();

	rtc_init_config();
 8000842:	f000 fcf1 	bl	8001228 <rtc_init_config>
	rtc_set_config();
 8000846:	f000 fd1b 	bl	8001280 <rtc_set_config>

	if((HW_REG(PWR+PWR_CSR) & PWR_CSR_SBF) == PWR_CSR_SBF){
 800084a:	4b77      	ldr	r3, [pc, #476]	@ (8000a28 <main+0x220>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b02      	cmp	r3, #2
 8000854:	d107      	bne.n	8000866 <main+0x5e>
		HW_REG(PWR+PWR_CR) |= PWR_CR_CSBF;
 8000856:	4b75      	ldr	r3, [pc, #468]	@ (8000a2c <main+0x224>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a74      	ldr	r2, [pc, #464]	@ (8000a2c <main+0x224>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6013      	str	r3, [r2, #0]

		stop_mode();
 8000862:	f000 f8f5 	bl	8000a50 <stop_mode>
	i2c_set_address(0x00);
	i2c_transmit_data(tx_data, 1);
	i2c_stop();
	*/

	usart1_clock_config();
 8000866:	f000 fe65 	bl	8001534 <usart1_clock_config>
	usart1_gpio_config();
 800086a:	f000 fe73 	bl	8001554 <usart1_gpio_config>
	usart1_init_config();
 800086e:	f000 fe91 	bl	8001594 <usart1_init_config>

	AuxiliaryNode networkNodes[MAX_NODES];
	volatile unsigned char rx_data[6][32] = {};
 8000872:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000876:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800087a:	4618      	mov	r0, r3
 800087c:	23c0      	movs	r3, #192	@ 0xc0
 800087e:	461a      	mov	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f000 fefe 	bl	8001682 <memset>
	FSM_State current_state = STATE_IDLE;
 8000886:	2300      	movs	r3, #0
 8000888:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf

	/* Loop forever */
	unsigned int last_time = rtc_get_time();
 800088c:	f000 fcaa 	bl	80011e4 <rtc_get_time>
 8000890:	f8c7 01b8 	str.w	r0, [r7, #440]	@ 0x1b8
			process_command(rx_buffer);
		}
		*/


		unsigned int now = rtc_get_time();
 8000894:	f000 fca6 	bl	80011e4 <rtc_get_time>
 8000898:	f8c7 01a4 	str.w	r0, [r7, #420]	@ 0x1a4
		if ((now - last_time) >= 1) {
 800089c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80008a0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d0f5      	beq.n	8000894 <main+0x8c>

			switch(current_state){
 80008a8:	f897 31bf 	ldrb.w	r3, [r7, #447]	@ 0x1bf
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	f200 80b0 	bhi.w	8000a12 <main+0x20a>
 80008b2:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <main+0xb0>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	080008d1 	.word	0x080008d1
 80008c0:	08000981 	.word	0x08000981
 80008c4:	080009f1 	.word	0x080009f1
				case STATE_IDLE:
					current_state = STATE_BROADCASTING;
 80008c8:	2301      	movs	r3, #1
 80008ca:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					break;
 80008ce:	e0a3      	b.n	8000a18 <main+0x210>

				case STATE_BROADCASTING:
					for(int i = 0; i < MAX_NODES ;i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 80008d6:	e03f      	b.n	8000958 <main+0x150>
						nrf24_init_config();
 80008d8:	f000 f970 	bl	8000bbc <nrf24_init_config>
						nrf24_tx_mode((unsigned char*)(rx_addr+i), 10);
 80008dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80008e0:	4613      	mov	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4413      	add	r3, r2
 80008e6:	4a52      	ldr	r2, [pc, #328]	@ (8000a30 <main+0x228>)
 80008e8:	4413      	add	r3, r2
 80008ea:	210a      	movs	r1, #10
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 f993 	bl	8000c18 <nrf24_tx_mode>
						// Habilitar auto-ack
						//nrf24_tx_mode_with_enaa((unsigned char*)(rx_addr+i), 10);

						//if(nrf24_transmit_no_ack((unsigned char*)(rx_addr+i)) == 1)
						if(nrf24_transmit((unsigned char*)(rx_addr+i)) == 1)
 80008f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80008f6:	4613      	mov	r3, r2
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	4a4c      	ldr	r2, [pc, #304]	@ (8000a30 <main+0x228>)
 80008fe:	4413      	add	r3, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f9b3 	bl	8000c6c <nrf24_transmit>
 8000906:	4603      	mov	r3, r0
 8000908:	2b01      	cmp	r3, #1
 800090a:	d120      	bne.n	800094e <main+0x146>
						{
							HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
 800090c:	4b49      	ldr	r3, [pc, #292]	@ (8000a34 <main+0x22c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a48      	ldr	r2, [pc, #288]	@ (8000a34 <main+0x22c>)
 8000912:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000916:	6013      	str	r3, [r2, #0]
							for(int i=0;i<100000;i++){};
 8000918:	2300      	movs	r3, #0
 800091a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800091e:	e004      	b.n	800092a <main+0x122>
 8000920:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000924:	3301      	adds	r3, #1
 8000926:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 800092a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800092e:	4a42      	ldr	r2, [pc, #264]	@ (8000a38 <main+0x230>)
 8000930:	4293      	cmp	r3, r2
 8000932:	ddf5      	ble.n	8000920 <main+0x118>
							networkNodes[i].status = NODE_REQUEST_PENDING;
 8000934:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8000938:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 800093c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000940:	2126      	movs	r1, #38	@ 0x26
 8000942:	fb01 f303 	mul.w	r3, r1, r3
 8000946:	4413      	add	r3, r2
 8000948:	3305      	adds	r3, #5
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < MAX_NODES ;i++) {
 800094e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000952:	3301      	adds	r3, #1
 8000954:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8000958:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800095c:	2b05      	cmp	r3, #5
 800095e:	ddbb      	ble.n	80008d8 <main+0xd0>
						}
					}
					nrf24_init_config();
 8000960:	f000 f92c 	bl	8000bbc <nrf24_init_config>
					nrf24_multiceiver(rx_address, 10);
 8000964:	210a      	movs	r1, #10
 8000966:	4835      	ldr	r0, [pc, #212]	@ (8000a3c <main+0x234>)
 8000968:	f000 f9ca 	bl	8000d00 <nrf24_multiceiver>

					state_listenig_timeout = 0;
 800096c:	4b34      	ldr	r3, [pc, #208]	@ (8000a40 <main+0x238>)
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]

					systick_init_config(1000*1000*1);
 8000972:	4834      	ldr	r0, [pc, #208]	@ (8000a44 <main+0x23c>)
 8000974:	f000 fd80 	bl	8001478 <systick_init_config>
					/*
					while(1){};
					*/

					current_state = STATE_LISTENING;
 8000978:	2302      	movs	r3, #2
 800097a:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					break;
 800097e:	e04b      	b.n	8000a18 <main+0x210>

				case STATE_LISTENING:
					for(int node_id = 0; node_id < MAX_NODES ; node_id++) {
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000986:	e024      	b.n	80009d2 <main+0x1ca>
						pipe_number = read_pipe();
 8000988:	f000 fa5a 	bl	8000e40 <read_pipe>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b2d      	ldr	r3, [pc, #180]	@ (8000a48 <main+0x240>)
 8000992:	701a      	strb	r2, [r3, #0]
						//pipe_number = read_security_pipe(rx_data);

						//if(is_data_available(1) == 1){}
						if((pipe_number != 6) && (pipe_number != 7))
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <main+0x240>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b06      	cmp	r3, #6
 800099c:	d014      	beq.n	80009c8 <main+0x1c0>
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <main+0x240>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d00f      	beq.n	80009c8 <main+0x1c0>
						{
							//networkNodes[pipe_number].status = NODE_DATA_RECEIVED;
							nrf24_receive((unsigned char*)(rx_data+pipe_number));
 80009a8:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <main+0x240>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	015b      	lsls	r3, r3, #5
 80009b0:	463a      	mov	r2, r7
 80009b2:	4413      	add	r3, r2
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa63 	bl	8000e80 <nrf24_receive>
							receive_pd = nrf24_read_reg(NRF24L01_RPD);
 80009ba:	2009      	movs	r0, #9
 80009bc:	f000 f8c2 	bl	8000b44 <nrf24_read_reg>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <main+0x244>)
 80009c6:	601a      	str	r2, [r3, #0]
					for(int node_id = 0; node_id < MAX_NODES ; node_id++) {
 80009c8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80009cc:	3301      	adds	r3, #1
 80009ce:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80009d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80009d6:	2b05      	cmp	r3, #5
 80009d8:	ddd6      	ble.n	8000988 <main+0x180>
							//HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
						}
					}

					if(state_listenig_timeout == 1){
 80009da:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <main+0x238>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d119      	bne.n	8000a16 <main+0x20e>
						state_listenig_timeout = 0;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <main+0x238>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
						//SYSTICK_EXCEPTION_DISABLE();
						current_state = STATE_PROCESSING;
 80009e8:	2303      	movs	r3, #3
 80009ea:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					}

					break;
 80009ee:	e012      	b.n	8000a16 <main+0x20e>
					unsigned int temperatura = ((unsigned int)(buffer[3]&0x0F) << 16) | ((unsigned int)buffer[4] << 8) | (unsigned int)buffer[5] ;

					umid = ((float)umidade / 1048576.0f) * 100.0f;
					temp = ((float)temperatura / 1048576.0f) * 200.0f - 50.0f;
					*/
					for(int node_id = 0; node_id < MAX_NODES ; node_id++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80009f6:	e004      	b.n	8000a02 <main+0x1fa>
 80009f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8000a02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000a06:	2b05      	cmp	r3, #5
 8000a08:	ddf6      	ble.n	80009f8 <main+0x1f0>
							uart_write("Recebido\r\n");
						}
							*/
					}

					current_state = STATE_IDLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f887 31bf 	strb.w	r3, [r7, #447]	@ 0x1bf
					break;
 8000a10:	e002      	b.n	8000a18 <main+0x210>

				default:

					break;
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <main+0x210>
					break;
 8000a16:	bf00      	nop
			}

			last_time = now;
 8000a18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8000a1c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	{
 8000a20:	e738      	b.n	8000894 <main+0x8c>
 8000a22:	bf00      	nop
 8000a24:	40013000 	.word	0x40013000
 8000a28:	40007004 	.word	0x40007004
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	4001100c 	.word	0x4001100c
 8000a38:	0001869f 	.word	0x0001869f
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	2000004c 	.word	0x2000004c
 8000a44:	000f4240 	.word	0x000f4240
 8000a48:	20000046 	.word	0x20000046
 8000a4c:	20000048 	.word	0x20000048

08000a50 <stop_mode>:
static __attribute__((used)) void sleep_mode(){
	HW_REG(SCB+SCB_SCR) &= ~SCB_SCR_SLEEPDEEP; //Clear DEEPSLEEP
	__WFI();
}

static __attribute__((used)) void stop_mode(){
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	HW_REG(SCB+SCB_SCR) |= SCB_SCR_SLEEPDEEP; //Set DEEPSLEEP
 8000a54:	4b12      	ldr	r3, [pc, #72]	@ (8000aa0 <stop_mode+0x50>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a11      	ldr	r2, [pc, #68]	@ (8000aa0 <stop_mode+0x50>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6013      	str	r3, [r2, #0]
	HW_REG(PWR+PWR_CR) &= ~PWR_CR_PDDS;	//Clear PDDS
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <stop_mode+0x54>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <stop_mode+0x54>)
 8000a66:	f023 0302 	bic.w	r3, r3, #2
 8000a6a:	6013      	str	r3, [r2, #0]
	HW_REG(PWR+PWR_CR) &= ~PWR_CR_LPDS;	// Voltage regulator on during Stop mode
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <stop_mode+0x54>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <stop_mode+0x54>)
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]
	//HW_REG(PWR+PWR_CR) |= PWR_CR_LPDS;	//Voltage regulator in low-power mode
	HW_REG(EXTI+EXTI_PR) |= 0x000FFFFF;
 8000a78:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <stop_mode+0x58>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <stop_mode+0x58>)
 8000a7e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000a82:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000a86:	6013      	str	r3, [r2, #0]
	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <stop_mode+0x5c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <stop_mode+0x5c>)
 8000a8e:	f023 0302 	bic.w	r3, r3, #2
 8000a92:	6013      	str	r3, [r2, #0]
	__WFI();
 8000a94:	bf30      	wfi
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000f5c0 	.word	0xe000f5c0
 8000aa4:	40007000 	.word	0x40007000
 8000aa8:	40010414 	.word	0x40010414
 8000aac:	40002804 	.word	0x40002804

08000ab0 <nrf24_write_reg>:
		ATOMIC_SET_BIT_GPIO(NRF24_CE_PORT, NRF24_CE_PIN)

#define DISABLE_CE_PIN_NRF()	\
		ATOMIC_CLEAR_BIT_GPIO(NRF24_CE_PORT, NRF24_CE_PIN)

void nrf24_write_reg(unsigned char reg, unsigned char tx_data){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
	unsigned char buff[2];
	buff[0] = W_REGISTER | reg;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f043 0320 	orr.w	r3, r3, #32
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	733b      	strb	r3, [r7, #12]
	buff[1] = tx_data;
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	737b      	strb	r3, [r7, #13]

	SELECT_CS_PIN_NRF();
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <nrf24_write_reg+0x40>)
 8000ad0:	2210      	movs	r2, #16
 8000ad2:	601a      	str	r2, [r3, #0]

	spi_transmit_data(buff, 2);	//No timeout
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fca2 	bl	8001424 <spi_transmit_data>

	UNSELECT_CS_PIN_NRF();
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <nrf24_write_reg+0x44>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	601a      	str	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40010814 	.word	0x40010814
 8000af4:	40010810 	.word	0x40010810

08000af8 <nrf24_multiwrite_reg>:

void nrf24_multiwrite_reg(unsigned char reg, unsigned char* tx_data, unsigned int size){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	73fb      	strb	r3, [r7, #15]
	unsigned char buff[2];
	buff[0] = W_REGISTER | reg;
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	753b      	strb	r3, [r7, #20]
	//buff[1] = tx_data;

	SELECT_CS_PIN_NRF();
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <nrf24_multiwrite_reg+0x44>)
 8000b12:	2210      	movs	r2, #16
 8000b14:	601a      	str	r2, [r3, #0]

	spi_transmit_data(buff, 1);	//No timeout
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fc81 	bl	8001424 <spi_transmit_data>
	spi_transmit_data(tx_data, size);	//No timeout
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68b8      	ldr	r0, [r7, #8]
 8000b28:	f000 fc7c 	bl	8001424 <spi_transmit_data>

	UNSELECT_CS_PIN_NRF();
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <nrf24_multiwrite_reg+0x48>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40010814 	.word	0x40010814
 8000b40:	40010810 	.word	0x40010810

08000b44 <nrf24_read_reg>:

unsigned char nrf24_read_reg(unsigned char reg){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	unsigned char buff[1];
	buff[0] = R_REGISTER | reg;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	733b      	strb	r3, [r7, #12]

	unsigned char rx_data = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	72fb      	strb	r3, [r7, #11]
	SELECT_CS_PIN_NRF();
 8000b56:	4b0b      	ldr	r3, [pc, #44]	@ (8000b84 <nrf24_read_reg+0x40>)
 8000b58:	2210      	movs	r2, #16
 8000b5a:	601a      	str	r2, [r3, #0]

	spi_transmit_data(buff, 1);	//No timeout
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2101      	movs	r1, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fc5e 	bl	8001424 <spi_transmit_data>
	spi_receive_data(&rx_data, 1);	//No timeout
 8000b68:	f107 030b 	add.w	r3, r7, #11
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fc6c 	bl	800144c <spi_receive_data>

	UNSELECT_CS_PIN_NRF();
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <nrf24_read_reg+0x44>)
 8000b76:	2210      	movs	r2, #16
 8000b78:	601a      	str	r2, [r3, #0]

	return rx_data;
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40010814 	.word	0x40010814
 8000b88:	40010810 	.word	0x40010810

08000b8c <nrf24_sendcmd_reg>:
	spi_receive_data(rx_data, size);	//No timeout

	UNSELECT_CS_PIN_NRF();
}

void nrf24_sendcmd_reg(unsigned char cmd){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	SELECT_CS_PIN_NRF();
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <nrf24_sendcmd_reg+0x28>)
 8000b98:	2210      	movs	r2, #16
 8000b9a:	601a      	str	r2, [r3, #0]

	spi_transmit_data(&cmd, 1);	//No timeout
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fc3f 	bl	8001424 <spi_transmit_data>

	UNSELECT_CS_PIN_NRF();
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <nrf24_sendcmd_reg+0x2c>)
 8000ba8:	2210      	movs	r2, #16
 8000baa:	601a      	str	r2, [r3, #0]
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010814 	.word	0x40010814
 8000bb8:	40010810 	.word	0x40010810

08000bbc <nrf24_init_config>:

void nrf24_init_config(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	DISABLE_CE_PIN_NRF();
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <nrf24_init_config+0x54>)
 8000bc2:	2208      	movs	r2, #8
 8000bc4:	601a      	str	r2, [r3, #0]

	// reset all
	nrf24_reset(0);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 f988 	bl	8000edc <nrf24_reset>

	nrf24_write_reg(NRF24L01_CONFIG, 0x00 | CONFIG_EN_CRC | CONFIG_CRCO);
 8000bcc:	210c      	movs	r1, #12
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff ff6e 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_EN_AA, 0x00);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ff6a 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_EN_RXADDR, 0x00);
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ff66 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_SETUP_AW, 0x03);	//5 bytes TX/RX address
 8000be4:	2103      	movs	r1, #3
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff ff62 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_SETUP_RETR, 0xFF);
 8000bec:	21ff      	movs	r1, #255	@ 0xff
 8000bee:	2004      	movs	r0, #4
 8000bf0:	f7ff ff5e 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RF_CH, 0x00);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f7ff ff5a 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RF_SETUP, 0x0E);	//data rate 2Mbps, power 0dBm,
 8000bfc:	210e      	movs	r1, #14
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f7ff ff56 	bl	8000ab0 <nrf24_write_reg>

	ENABLE_CE_PIN_NRF();
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <nrf24_init_config+0x58>)
 8000c06:	2208      	movs	r2, #8
 8000c08:	601a      	str	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40010814 	.word	0x40010814
 8000c14:	40010810 	.word	0x40010810

08000c18 <nrf24_tx_mode>:

//set tx mode
void nrf24_tx_mode(unsigned char* address, unsigned char channel){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
	DISABLE_CE_PIN_NRF();
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <nrf24_tx_mode+0x4c>)
 8000c26:	2208      	movs	r2, #8
 8000c28:	601a      	str	r2, [r3, #0]

	nrf24_write_reg(NRF24L01_RF_CH, channel);
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	2005      	movs	r0, #5
 8000c30:	f7ff ff3e 	bl	8000ab0 <nrf24_write_reg>
	nrf24_multiwrite_reg(NRF24L01_TX_ADDR, address, 5);
 8000c34:	2205      	movs	r2, #5
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	2010      	movs	r0, #16
 8000c3a:	f7ff ff5d 	bl	8000af8 <nrf24_multiwrite_reg>

	nrf24_write_reg(NRF24L01_CONFIG, nrf24_read_reg(NRF24L01_CONFIG) | CONFIG_PWR_UP_ENABLE);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff ff80 	bl	8000b44 <nrf24_read_reg>
 8000c44:	4603      	mov	r3, r0
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff2e 	bl	8000ab0 <nrf24_write_reg>

	ENABLE_CE_PIN_NRF();
 8000c54:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <nrf24_tx_mode+0x50>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	601a      	str	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010814 	.word	0x40010814
 8000c68:	40010810 	.word	0x40010810

08000c6c <nrf24_transmit>:

	return 0;
}
*/

unsigned char nrf24_transmit(unsigned char* tx_data) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
    // Carrega o payload para a FIFO do rádio
	SELECT_CS_PIN_NRF();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <nrf24_transmit+0x88>)
 8000c76:	2210      	movs	r2, #16
 8000c78:	601a      	str	r2, [r3, #0]
    nrf24_multiwrite_reg(W_TX_PAYLOAD, tx_data, 32);
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	6879      	ldr	r1, [r7, #4]
 8000c7e:	20a0      	movs	r0, #160	@ 0xa0
 8000c80:	f7ff ff3a 	bl	8000af8 <nrf24_multiwrite_reg>
    UNSELECT_CS_PIN_NRF();
 8000c84:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf8 <nrf24_transmit+0x8c>)
 8000c86:	2210      	movs	r2, #16
 8000c88:	601a      	str	r2, [r3, #0]

    // Agora, esperamos pelo resultado da transação
    unsigned char status;
    volatile unsigned int wait_ticks = 200000;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <nrf24_transmit+0x90>)
 8000c8c:	60bb      	str	r3, [r7, #8]
    while (wait_ticks > 0) {
 8000c8e:	e011      	b.n	8000cb4 <nrf24_transmit+0x48>
        status = nrf24_read_reg(NRF24L01_STATUS);
 8000c90:	2007      	movs	r0, #7
 8000c92:	f7ff ff57 	bl	8000b44 <nrf24_read_reg>
 8000c96:	4603      	mov	r3, r0
 8000c98:	73fb      	strb	r3, [r7, #15]

        // Verifica se a transação terminou (com sucesso TX_DS ou falha MAX_RT)
        if ((status & (1 << 5)) || (status & (1 << 4))) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 0320 	and.w	r3, r3, #32
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d10a      	bne.n	8000cba <nrf24_transmit+0x4e>
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <nrf24_transmit+0x4e>
            break;
        }
        wait_ticks--;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
    while (wait_ticks > 0) {
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ea      	bne.n	8000c90 <nrf24_transmit+0x24>
    }

    // Limpa a FIFO de TX por segurança
    nrf24_sendcmd_reg(FLUSH_TX);
 8000cba:	20e1      	movs	r0, #225	@ 0xe1
 8000cbc:	f7ff ff66 	bl	8000b8c <nrf24_sendcmd_reg>

    // Verifica se a flag de SUCESSO (TX_DS) foi ativada
    if (status & (1 << 5)) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d005      	beq.n	8000cd6 <nrf24_transmit+0x6a>
        nrf24_write_reg(NRF24L01_STATUS, (1 << 5)); // Limpa a flag
 8000cca:	2120      	movs	r1, #32
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f7ff feef 	bl	8000ab0 <nrf24_write_reg>
        return 1; // Sucesso
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e009      	b.n	8000cea <nrf24_transmit+0x7e>
    }

    // Se chegou aqui, falhou. Limpa a flag de MAX_RT se necessário.
    if (status & (1 << 4)) {
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d003      	beq.n	8000ce8 <nrf24_transmit+0x7c>
        nrf24_write_reg(NRF24L01_STATUS, (1 << 4));
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f7ff fee4 	bl	8000ab0 <nrf24_write_reg>
    }

    return 0; // Falha!
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010814 	.word	0x40010814
 8000cf8:	40010810 	.word	0x40010810
 8000cfc:	00030d40 	.word	0x00030d40

08000d00 <nrf24_multiceiver>:
	}

	return 0; // falha
}

void nrf24_multiceiver(unsigned char* address, unsigned char channel){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
	DISABLE_CE_PIN_NRF();
 8000d0c:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <nrf24_multiceiver+0x130>)
 8000d0e:	2208      	movs	r2, #8
 8000d10:	601a      	str	r2, [r3, #0]
	nrf24_reset (NRF24L01_STATUS);
 8000d12:	2007      	movs	r0, #7
 8000d14:	f000 f8e2 	bl	8000edc <nrf24_reset>
	nrf24_write_reg(NRF24L01_RF_CH, channel);
 8000d18:	78fb      	ldrb	r3, [r7, #3]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	2005      	movs	r0, #5
 8000d1e:	f7ff fec7 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_EN_RXADDR, nrf24_read_reg(NRF24L01_EN_RXADDR) |
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff ff0e 	bl	8000b44 <nrf24_read_reg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4619      	mov	r1, r3
 8000d32:	2002      	movs	r0, #2
 8000d34:	f7ff febc 	bl	8000ab0 <nrf24_write_reg>
										EN_RXADDR_ERX_P2_ENABLE |
										EN_RXADDR_ERX_P3_ENABLE |
										EN_RXADDR_ERX_P4_ENABLE |
										EN_RXADDR_ERX_P5_ENABLE
					);
	unsigned char rx_addr0[5] = {0x02, 0xDD, 0xCC, 0xBB, 0xAA};
 8000d38:	4a3e      	ldr	r2, [pc, #248]	@ (8000e34 <nrf24_multiceiver+0x134>)
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d42:	6018      	str	r0, [r3, #0]
 8000d44:	3304      	adds	r3, #4
 8000d46:	7019      	strb	r1, [r3, #0]
	unsigned char rx_addr1[5] = {0x06, 0xDD, 0xCC, 0xBB, 0xAA};
 8000d48:	4a3b      	ldr	r2, [pc, #236]	@ (8000e38 <nrf24_multiceiver+0x138>)
 8000d4a:	f107 0318 	add.w	r3, r7, #24
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	6018      	str	r0, [r3, #0]
 8000d54:	3304      	adds	r3, #4
 8000d56:	7019      	strb	r1, [r3, #0]
	unsigned char rx_addr2[1] = {0x01};
 8000d58:	2301      	movs	r3, #1
 8000d5a:	753b      	strb	r3, [r7, #20]
	unsigned char rx_addr3[1] = {0x03};
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	743b      	strb	r3, [r7, #16]
	unsigned char rx_addr4[1] = {0x04};
 8000d60:	2304      	movs	r3, #4
 8000d62:	733b      	strb	r3, [r7, #12]
	unsigned char rx_addr5[1] = {0x05};
 8000d64:	2305      	movs	r3, #5
 8000d66:	723b      	strb	r3, [r7, #8]

	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P0, rx_addr0, 5);
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	2205      	movs	r2, #5
 8000d6e:	4619      	mov	r1, r3
 8000d70:	200a      	movs	r0, #10
 8000d72:	f7ff fec1 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P1, rx_addr1, 5);
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	2205      	movs	r2, #5
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	200b      	movs	r0, #11
 8000d80:	f7ff feba 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P2, rx_addr2, 1);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	200c      	movs	r0, #12
 8000d8e:	f7ff feb3 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P3, rx_addr3, 1);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f7ff feac 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P4, rx_addr4, 1);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2201      	movs	r2, #1
 8000da6:	4619      	mov	r1, r3
 8000da8:	200e      	movs	r0, #14
 8000daa:	f7ff fea5 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P5, rx_addr5, 1);
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	200f      	movs	r0, #15
 8000db8:	f7ff fe9e 	bl	8000af8 <nrf24_multiwrite_reg>
	//nrf24_write_reg(NRF24L01_RX_ADDR_P2, 0xFF);

	nrf24_write_reg(NRF24L01_EN_AA, EN_AA_ENAA_P0 |
 8000dbc:	213f      	movs	r1, #63	@ 0x3f
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f7ff fe76 	bl	8000ab0 <nrf24_write_reg>
									EN_AA_ENAA_P2 |
									EN_AA_ENAA_P3 |
									EN_AA_ENAA_P4 |
									EN_AA_ENAA_P5);

	nrf24_write_reg(NRF24L01_RX_PW_P0, 32);
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	2011      	movs	r0, #17
 8000dc8:	f7ff fe72 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P1, 32);	//payload de 32 bytes
 8000dcc:	2120      	movs	r1, #32
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f7ff fe6e 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P2, 32);
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	2013      	movs	r0, #19
 8000dd8:	f7ff fe6a 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P3, 32);
 8000ddc:	2120      	movs	r1, #32
 8000dde:	2014      	movs	r0, #20
 8000de0:	f7ff fe66 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P4, 32);
 8000de4:	2120      	movs	r1, #32
 8000de6:	2015      	movs	r0, #21
 8000de8:	f7ff fe62 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P5, 32);
 8000dec:	2120      	movs	r1, #32
 8000dee:	2016      	movs	r0, #22
 8000df0:	f7ff fe5e 	bl	8000ab0 <nrf24_write_reg>

	nrf24_write_reg(NRF24L01_CONFIG, nrf24_read_reg(NRF24L01_CONFIG) | CONFIG_PRIM_RX_PRX);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f7ff fea5 	bl	8000b44 <nrf24_read_reg>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff fe53 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_CONFIG, nrf24_read_reg(NRF24L01_CONFIG) | CONFIG_PWR_UP_ENABLE);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe9a 	bl	8000b44 <nrf24_read_reg>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	4619      	mov	r1, r3
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff fe48 	bl	8000ab0 <nrf24_write_reg>

	ENABLE_CE_PIN_NRF();
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <nrf24_multiceiver+0x13c>)
 8000e22:	2208      	movs	r2, #8
 8000e24:	601a      	str	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40010814 	.word	0x40010814
 8000e34:	080016f4 	.word	0x080016f4
 8000e38:	080016fc 	.word	0x080016fc
 8000e3c:	40010810 	.word	0x40010810

08000e40 <read_pipe>:
		return 1;
	}
	return 0;
}

unsigned char read_pipe(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	unsigned char fifo_status = nrf24_read_reg(NRF24L01_STATUS);
 8000e46:	2007      	movs	r0, #7
 8000e48:	f7ff fe7c 	bl	8000b44 <nrf24_read_reg>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]

	if((fifo_status & STATUS_RX_DR))
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <read_pipe+0x2c>
	{
		nrf24_write_reg(NRF24L01_STATUS, STATUS_RX_DR);
 8000e5a:	2140      	movs	r1, #64	@ 0x40
 8000e5c:	2007      	movs	r0, #7
 8000e5e:	f7ff fe27 	bl	8000ab0 <nrf24_write_reg>
		fifo_status = nrf24_read_reg(NRF24L01_STATUS);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f7ff fe6e 	bl	8000b44 <nrf24_read_reg>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
	}

	return (fifo_status & 0x0E) >> 1;;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	105b      	asrs	r3, r3, #1
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	b2db      	uxtb	r3, r3
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <nrf24_receive>:
	}

	return (fifo_status & 0x0E) >> 1;;
}

void nrf24_receive(unsigned char* tx_data){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	unsigned char cmd = R_RX_PAYLOAD;
 8000e88:	2361      	movs	r3, #97	@ 0x61
 8000e8a:	73fb      	strb	r3, [r7, #15]

	SELECT_CS_PIN_NRF();
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <nrf24_receive+0x50>)
 8000e8e:	2210      	movs	r2, #16
 8000e90:	601a      	str	r2, [r3, #0]

	// spi_transmit payload command
	spi_transmit_data(&cmd, 1);
 8000e92:	f107 030f 	add.w	r3, r7, #15
 8000e96:	2101      	movs	r1, #1
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fac3 	bl	8001424 <spi_transmit_data>
	// spi_transmit receive payload
	spi_receive_data(tx_data, 32);	// receive 32 bytes
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 fad3 	bl	800144c <spi_receive_data>

	UNSELECT_CS_PIN_NRF();
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <nrf24_receive+0x54>)
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]

	// delay
	for(volatile int i=0;i<100000;i++){};
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	e002      	b.n	8000eb8 <nrf24_receive+0x38>
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <nrf24_receive+0x58>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	ddf8      	ble.n	8000eb2 <nrf24_receive+0x32>

	nrf24_sendcmd_reg(FLUSH_RX);
 8000ec0:	20e2      	movs	r0, #226	@ 0xe2
 8000ec2:	f7ff fe63 	bl	8000b8c <nrf24_sendcmd_reg>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40010814 	.word	0x40010814
 8000ed4:	40010810 	.word	0x40010810
 8000ed8:	0001869f 	.word	0x0001869f

08000edc <nrf24_reset>:

void nrf24_reset(unsigned int REG)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	if (REG == NRF24L01_STATUS)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b07      	cmp	r3, #7
 8000ee8:	d104      	bne.n	8000ef4 <nrf24_reset+0x18>
	{
		nrf24_write_reg(NRF24L01_STATUS, 0x00);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2007      	movs	r0, #7
 8000eee:	f7ff fddf 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P5, 0);
	nrf24_write_reg(NRF24L01_FIFO_STATUS, 0x11);
	nrf24_write_reg(NRF24L01_DYNPD, 0);
	nrf24_write_reg(NRF24L01_FEATURE, 0);
	}
}
 8000ef2:	e090      	b.n	8001016 <nrf24_reset+0x13a>
	else if (REG == NRF24L01_FIFO_STATUS)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b17      	cmp	r3, #23
 8000ef8:	d104      	bne.n	8000f04 <nrf24_reset+0x28>
		nrf24_write_reg(NRF24L01_FIFO_STATUS, 0x11);
 8000efa:	2111      	movs	r1, #17
 8000efc:	2017      	movs	r0, #23
 8000efe:	f7ff fdd7 	bl	8000ab0 <nrf24_write_reg>
}
 8000f02:	e088      	b.n	8001016 <nrf24_reset+0x13a>
	nrf24_write_reg(NRF24L01_CONFIG, 0x08);
 8000f04:	2108      	movs	r1, #8
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff fdd2 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_EN_AA, 0x3F);
 8000f0c:	213f      	movs	r1, #63	@ 0x3f
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f7ff fdce 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_EN_RXADDR, 0x03);
 8000f14:	2103      	movs	r1, #3
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff fdca 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_SETUP_AW, 0x03);
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f7ff fdc6 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_SETUP_RETR, 0x03);
 8000f24:	2103      	movs	r1, #3
 8000f26:	2004      	movs	r0, #4
 8000f28:	f7ff fdc2 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RF_CH, 0x02);
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	2005      	movs	r0, #5
 8000f30:	f7ff fdbe 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RF_SETUP, 0x0E);
 8000f34:	210e      	movs	r1, #14
 8000f36:	2006      	movs	r0, #6
 8000f38:	f7ff fdba 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_STATUS, 0x00);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2007      	movs	r0, #7
 8000f40:	f7ff fdb6 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_OBSERVE_TX, 0x00);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2008      	movs	r0, #8
 8000f48:	f7ff fdb2 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RPD, 0x00);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2009      	movs	r0, #9
 8000f50:	f7ff fdae 	bl	8000ab0 <nrf24_write_reg>
	unsigned char rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f54:	4a32      	ldr	r2, [pc, #200]	@ (8001020 <nrf24_reset+0x144>)
 8000f56:	f107 0318 	add.w	r3, r7, #24
 8000f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5e:	6018      	str	r0, [r3, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	7019      	strb	r1, [r3, #0]
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P0, rx_addr_p0_def, 5);
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	2205      	movs	r2, #5
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f7ff fdc3 	bl	8000af8 <nrf24_multiwrite_reg>
	unsigned char rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000f72:	4a2c      	ldr	r2, [pc, #176]	@ (8001024 <nrf24_reset+0x148>)
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	6018      	str	r0, [r3, #0]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	7019      	strb	r1, [r3, #0]
	nrf24_multiwrite_reg(NRF24L01_RX_ADDR_P1, rx_addr_p1_def, 5);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2205      	movs	r2, #5
 8000f88:	4619      	mov	r1, r3
 8000f8a:	200b      	movs	r0, #11
 8000f8c:	f7ff fdb4 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_write_reg(NRF24L01_RX_ADDR_P2, 0xC3);
 8000f90:	21c3      	movs	r1, #195	@ 0xc3
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fd8c 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_ADDR_P3, 0xC4);
 8000f98:	21c4      	movs	r1, #196	@ 0xc4
 8000f9a:	200d      	movs	r0, #13
 8000f9c:	f7ff fd88 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_ADDR_P4, 0xC5);
 8000fa0:	21c5      	movs	r1, #197	@ 0xc5
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fd84 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_ADDR_P5, 0xC6);
 8000fa8:	21c6      	movs	r1, #198	@ 0xc6
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff fd80 	bl	8000ab0 <nrf24_write_reg>
	unsigned char tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8001020 <nrf24_reset+0x144>)
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fba:	6018      	str	r0, [r3, #0]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	7019      	strb	r1, [r3, #0]
	nrf24_multiwrite_reg(NRF24L01_TX_ADDR, tx_addr_def, 5);
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2010      	movs	r0, #16
 8000fca:	f7ff fd95 	bl	8000af8 <nrf24_multiwrite_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P0, 0);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2011      	movs	r0, #17
 8000fd2:	f7ff fd6d 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P1, 0);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f7ff fd69 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P2, 0);
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2013      	movs	r0, #19
 8000fe2:	f7ff fd65 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P3, 0);
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f7ff fd61 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P4, 0);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	2015      	movs	r0, #21
 8000ff2:	f7ff fd5d 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_RX_PW_P5, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2016      	movs	r0, #22
 8000ffa:	f7ff fd59 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_FIFO_STATUS, 0x11);
 8000ffe:	2111      	movs	r1, #17
 8001000:	2017      	movs	r0, #23
 8001002:	f7ff fd55 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_DYNPD, 0);
 8001006:	2100      	movs	r1, #0
 8001008:	201c      	movs	r0, #28
 800100a:	f7ff fd51 	bl	8000ab0 <nrf24_write_reg>
	nrf24_write_reg(NRF24L01_FEATURE, 0);
 800100e:	2100      	movs	r1, #0
 8001010:	201d      	movs	r0, #29
 8001012:	f7ff fd4d 	bl	8000ab0 <nrf24_write_reg>
}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	08001704 	.word	0x08001704
 8001024:	0800170c 	.word	0x0800170c

08001028 <ir_init_pwm>:

#define TIM_CCMR1_OC1M_set (0x7 << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M_PWM1 (0x6UL << TIM_CCMR1_OC1M_Pos) // PWM mode 1


void ir_init_pwm(void) {
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
    //enable tim1 clock
    ENABLE_CLOCK_APB2(RCC_APB2ENR_TIM1EN_CLOCK_ENABLE);
 800102c:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <ir_init_pwm+0x8c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a20      	ldr	r2, [pc, #128]	@ (80010b4 <ir_init_pwm+0x8c>)
 8001032:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001036:	6013      	str	r3, [r2, #0]

    // configure the timer for PWM in 38kHz
    HW_REG(TIMER1+TIMx_PSC) = 0; // prescaler
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <ir_init_pwm+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER1+TIMx_ARR) = 210;
 800103e:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <ir_init_pwm+0x94>)
 8001040:	22d2      	movs	r2, #210	@ 0xd2
 8001042:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER1+TIMx_CCR1) = 0; // initial duty cycle in 0%
 8001044:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <ir_init_pwm+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]

    // configure pwm mode
    HW_REG(TIMER1+TIMx_CCMR1) &= ~TIM_CCMR1_OC1M_set; // clear OC1M bits
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <ir_init_pwm+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1d      	ldr	r2, [pc, #116]	@ (80010c4 <ir_init_pwm+0x9c>)
 8001050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001054:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CCMR1) |= TIM_CCMR1_OC1M_PWM1; // set OC1M to PWM mode 1
 8001056:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <ir_init_pwm+0x9c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1a      	ldr	r2, [pc, #104]	@ (80010c4 <ir_init_pwm+0x9c>)
 800105c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001060:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CCMR1) |= TIM_CCMR1_OC1PE; // enable preload for CCR1
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <ir_init_pwm+0x9c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <ir_init_pwm+0x9c>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6013      	str	r3, [r2, #0]

    /* ARPE + update generation */
    HW_REG(TIMER1+TIMx_CR1) |= TIM_CR1_ARPE; // ARPE bit
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <ir_init_pwm+0xa0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <ir_init_pwm+0xa0>)
 8001074:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001078:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_EGR) |= TIM_EGR_UG; // UG bit to generate an update event
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <ir_init_pwm+0xa4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a13      	ldr	r2, [pc, #76]	@ (80010cc <ir_init_pwm+0xa4>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6013      	str	r3, [r2, #0]

    /* Habilita saída CH1 e inicia o timer principal (com controle principal) */
    HW_REG(TIMER1+TIMx_CCER) |= TIM_CCER_CC1E_SET; // enable output CH1
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <ir_init_pwm+0xa8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <ir_init_pwm+0xa8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6013      	str	r3, [r2, #0]

    /* Em TIM1 precisamos habilitar o “main output enable” */
    HW_REG(TIMER1+TIMx_BDTR) |= TIM_BDTR_MOE_SET; // MOE bit
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <ir_init_pwm+0xac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0f      	ldr	r2, [pc, #60]	@ (80010d4 <ir_init_pwm+0xac>)
 8001098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800109c:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CR1) |= TIM_CR1_CEN_SET; // enable the timer
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <ir_init_pwm+0xa0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a09      	ldr	r2, [pc, #36]	@ (80010c8 <ir_init_pwm+0xa0>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40021018 	.word	0x40021018
 80010b8:	40012c28 	.word	0x40012c28
 80010bc:	40012c2c 	.word	0x40012c2c
 80010c0:	40012c34 	.word	0x40012c34
 80010c4:	40012c18 	.word	0x40012c18
 80010c8:	40012c00 	.word	0x40012c00
 80010cc:	40012c14 	.word	0x40012c14
 80010d0:	40012c20 	.word	0x40012c20
 80010d4:	40012c44 	.word	0x40012c44

080010d8 <system_clock_config>:
	int ahp;
	int apb1;	// 35MHz max
	int apb2;	// 72MHz max
}all_clock_typedef;

void __attribute__((weak)) system_clock_config(){
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	//HW_REG(RCCA+RCC_CFGR) |= RCC_CFGR_HPRE_SYSCLK_DIV4;	//SYSCLK divided by 4
	//4MHz

	//HW_REG(RCCA+RCC_CFGR) |= RCC_CFGR_SW_PLL;
	//while((HW_REG(RCCA+RCC_CFGR) & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <secondary_clock_config>:

void __attribute__((weak)) secondary_clock_config(){
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	HW_REG(RCCA+RCC_APB1ENR) |= RCC_PWREN_CLOCK_ENABLE;
 80010e8:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <secondary_clock_config+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a16      	ldr	r2, [pc, #88]	@ (8001148 <secondary_clock_config+0x64>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA+RCC_APB1ENR) |= RCC_BKPEN_CLOCK_ENABLE;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <secondary_clock_config+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <secondary_clock_config+0x64>)
 80010fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010fe:	6013      	str	r3, [r2, #0]

	HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <secondary_clock_config+0x68>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a11      	ldr	r2, [pc, #68]	@ (800114c <secondary_clock_config+0x68>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800110a:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA + RCC_BDCR) |= (1<<16);
 800110c:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <secondary_clock_config+0x6c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0f      	ldr	r2, [pc, #60]	@ (8001150 <secondary_clock_config+0x6c>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA + RCC_BDCR) &= ~(1<<16);
 8001118:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <secondary_clock_config+0x6c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <secondary_clock_config+0x6c>)
 800111e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001122:	6013      	str	r3, [r2, #0]

	HW_REG(RCCA+RCC_CSR) |= RCC_CSR_LSION_OSCILLATOR_ON;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <secondary_clock_config+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <secondary_clock_config+0x70>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]
	while((HW_REG(RCCA+RCC_CSR) & RCC_CSR_LSIRDY) != RCC_CSR_LSIRDY);
 8001130:	bf00      	nop
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <secondary_clock_config+0x70>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d1f9      	bne.n	8001132 <secondary_clock_config+0x4e>

	//HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_LSEON_OSCILLATOR_ON;
	//while((HW_REG(RCCA+RCC_BDCR) & RCC_BDCR_LSERDY) != RCC_BDCR_LSERDY);
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	4002101c 	.word	0x4002101c
 800114c:	40007000 	.word	0x40007000
 8001150:	40021020 	.word	0x40021020
 8001154:	40021024 	.word	0x40021024

08001158 <__NVIC_EnableIRQ>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4906      	ldr	r1, [pc, #24]	@ (800118c <__NVIC_EnableIRQ+0x34>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100

08001190 <__NVIC_SetPriority>:
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	6039      	str	r1, [r7, #0]
 800119a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	db0a      	blt.n	80011ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	490c      	ldr	r1, [pc, #48]	@ (80011dc <__NVIC_SetPriority+0x4c>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011b8:	e00a      	b.n	80011d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4908      	ldr	r1, [pc, #32]	@ (80011e0 <__NVIC_SetPriority+0x50>)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	3b04      	subs	r3, #4
 80011c8:	0112      	lsls	r2, r2, #4
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	440b      	add	r3, r1
 80011ce:	761a      	strb	r2, [r3, #24]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <rtc_get_time>:
#include "EXTI_utils.h"

void __attribute__((weak)) rtc_init_config();
void __attribute__((weak)) rtc_set_config();

unsigned int __attribute__((weak)) rtc_get_time() {
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
	unsigned int high1 = HW_REG(RTC+RTC_CNTH);
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <rtc_get_time+0x3c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
	unsigned int low = HW_REG(RTC+RTC_CNTL);
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <rtc_get_time+0x40>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60bb      	str	r3, [r7, #8]
	unsigned int high2 = HW_REG(RTC+RTC_CNTH);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <rtc_get_time+0x3c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	607b      	str	r3, [r7, #4]
    if (high1 != high2) {
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	429a      	cmp	r2, r3
 8001202:	d004      	beq.n	800120e <rtc_get_time+0x2a>
        low = HW_REG(RTC+RTC_CNTL);
 8001204:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <rtc_get_time+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60bb      	str	r3, [r7, #8]
        high1 = high2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]
    }
    return (high1 << 16) | low;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4313      	orrs	r3, r2
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40002818 	.word	0x40002818
 8001224:	4000281c 	.word	0x4000281c

08001228 <rtc_init_config>:

void rtc_init_config(){
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	//HW_REG(RCCA+RCC_APB1ENR) |= RCC_BKPEN_CLOCK_ENABLE;

	//HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
	//HW_REG(RCCA + RCC_BDCR) |= (1<<16);

	HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_RTCSEL_LSI;
 800122c:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <rtc_init_config+0x4c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a10      	ldr	r2, [pc, #64]	@ (8001274 <rtc_init_config+0x4c>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_RTCEN_RTC_CLOCK_ENABLE;
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <rtc_init_config+0x4c>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0d      	ldr	r2, [pc, #52]	@ (8001274 <rtc_init_config+0x4c>)
 800123e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001242:	6013      	str	r3, [r2, #0]
	//HW_REG(RCCA+RCC_CSR) &= ~RCC_CSR_LSION_OSCILLATOR_ON;

	HW_REG(EXTI+EXTI_RTSR) |= EXTI_IMR_MR17;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <rtc_init_config+0x50>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <rtc_init_config+0x50>)
 800124a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124e:	6013      	str	r3, [r2, #0]

	HW_REG(EXTI+EXTI_IMR) |= EXTI_IMR_MR17;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <rtc_init_config+0x54>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a09      	ldr	r2, [pc, #36]	@ (800127c <rtc_init_config+0x54>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125a:	6013      	str	r3, [r2, #0]
	//HW_REG(EXTI+EXTI_FTSR) |= EXTI_IMR_MR17;


	//HW_REG(PWR+PWR_CSR) |= PWR_CSR_EWUP;

	NVIC_SetPriority(RTCAlarm_IRQ,0x10); // Priority level 1
 800125c:	2110      	movs	r1, #16
 800125e:	2029      	movs	r0, #41	@ 0x29
 8001260:	f7ff ff96 	bl	8001190 <__NVIC_SetPriority>

	NVIC_EnableIRQ(RTCAlarm_IRQ);	// Enable EXTI17 interrupt on NVIC
 8001264:	2029      	movs	r0, #41	@ 0x29
 8001266:	f7ff ff77 	bl	8001158 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800126a:	b662      	cpsie	i
}
 800126c:	bf00      	nop

	__enable_irq();
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021020 	.word	0x40021020
 8001278:	40010408 	.word	0x40010408
 800127c:	40010400 	.word	0x40010400

08001280 <rtc_set_config>:

void rtc_set_config(){
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	//HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_RSF; //Clear RSF
 8001284:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <rtc_set_config+0xb4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2a      	ldr	r2, [pc, #168]	@ (8001334 <rtc_set_config+0xb4>)
 800128a:	f023 0308 	bic.w	r3, r3, #8
 800128e:	6013      	str	r3, [r2, #0]
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RSF) != RTC_CRL_RSF);
 8001290:	bf00      	nop
 8001292:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <rtc_set_config+0xb4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b08      	cmp	r3, #8
 800129c:	d1f9      	bne.n	8001292 <rtc_set_config+0x12>

	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 800129e:	bf00      	nop
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <rtc_set_config+0xb4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	d1f9      	bne.n	80012a0 <rtc_set_config+0x20>
	HW_REG(RTC+RTC_CRL) |= (ENTER_CONFIGURATION_MODE); //To write RTC_PRL, RTC_CNT, RTC_ALR
 80012ac:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <rtc_set_config+0xb4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <rtc_set_config+0xb4>)
 80012b2:	f043 0310 	orr.w	r3, r3, #16
 80012b6:	6013      	str	r3, [r2, #0]



	//HW_REG(RTC+RTC_PRLH) = 0;	//Only write
	//HW_REG(RTC+RTC_PRLL) = ((FREQ_40KHz+1)/2)-1;	//Only write
	HW_REG(RTC+RTC_PRLL) = FREQ_40KHz;	//Only write
 80012b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <rtc_set_config+0xb8>)
 80012ba:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80012be:	601a      	str	r2, [r3, #0]
	//HW_REG(RTC+RTC_DIVL);	//Only read

	//HW_REG(RTC+RTC_CNTH) = 0;	//RW
	//HW_REG(RTC+RTC_CNTL) = 0;	//RW

	HW_REG(RTC+RTC_ALRH) = 0;	//Only Write
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <rtc_set_config+0xbc>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	HW_REG(RTC+RTC_ALRL) = HW_REG(RTC+RTC_ALRL) + 1;	//Only Write
 80012c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001340 <rtc_set_config+0xc0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <rtc_set_config+0xc0>)
 80012cc:	3301      	adds	r3, #1
 80012ce:	6013      	str	r3, [r2, #0]

	HW_REG(RTC+RTC_CRL) &= ~(ENTER_CONFIGURATION_MODE);
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <rtc_set_config+0xb4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <rtc_set_config+0xb4>)
 80012d6:	f023 0310 	bic.w	r3, r3, #16
 80012da:	6013      	str	r3, [r2, #0]
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 80012dc:	bf00      	nop
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <rtc_set_config+0xb4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	d1f9      	bne.n	80012de <rtc_set_config+0x5e>

	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <rtc_set_config+0xb4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a11      	ldr	r2, [pc, #68]	@ (8001334 <rtc_set_config+0xb4>)
 80012f0:	f023 0302 	bic.w	r3, r3, #2
 80012f4:	6013      	str	r3, [r2, #0]
	HW_REG(EXTI+EXTI_PR) |= (1<<17);
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <rtc_set_config+0xc4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <rtc_set_config+0xc4>)
 80012fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001300:	6013      	str	r3, [r2, #0]
	HW_REG(RTC+RTC_CRH) |= RTC_CRH_ALRIE;	//RW active or not interrupt
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <rtc_set_config+0xc8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a10      	ldr	r2, [pc, #64]	@ (8001348 <rtc_set_config+0xc8>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6013      	str	r3, [r2, #0]

	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_RSF; //Clear RSF
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <rtc_set_config+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <rtc_set_config+0xb4>)
 8001314:	f023 0308 	bic.w	r3, r3, #8
 8001318:	6013      	str	r3, [r2, #0]
	//HW_REG(PWR + PWR_CR) &= ~PWR_CR_DBP;
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RSF) != RTC_CRL_RSF);
 800131a:	bf00      	nop
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <rtc_set_config+0xb4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b08      	cmp	r3, #8
 8001326:	d1f9      	bne.n	800131c <rtc_set_config+0x9c>
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	40002804 	.word	0x40002804
 8001338:	4000280c 	.word	0x4000280c
 800133c:	40002820 	.word	0x40002820
 8001340:	40002824 	.word	0x40002824
 8001344:	40010414 	.word	0x40010414
 8001348:	40002800 	.word	0x40002800

0800134c <spi_dma_config>:

	NVIC_SetPriority(SPI1_IRQ,0x10); // Priority level 1

	NVIC_EnableIRQ(SPI1_IRQ);	// Enable EXTI17 interrupt on NVIC
}
void spi_dma_config(){
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	HW_REG(SPI1+SPI_CR2) |= SPI_CR2_TXDMAEN_ENABLE;
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <spi_dma_config+0x24>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <spi_dma_config+0x24>)
 8001356:	f043 0302 	orr.w	r3, r3, #2
 800135a:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR2) |= SPI_CR2_RXDMAEN_ENABLE;
 800135c:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <spi_dma_config+0x24>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a03      	ldr	r2, [pc, #12]	@ (8001370 <spi_dma_config+0x24>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40013004 	.word	0x40013004

08001374 <spi_init_config>:

void spi_init_config(){
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB2(RCC_APB2ENR_SPI1EN_CLOCK_ENABLE);
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <spi_init_config+0xa4>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a26      	ldr	r2, [pc, #152]	@ (8001418 <spi_init_config+0xa4>)
 800137e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001382:	6013      	str	r3, [r2, #0]
	//Disable SPI
	//HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_SPE_ENABLE;

	//HW_REG(SPI1+SPI_CR1) = 0;

	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_BIDIMODE_LINES_BIDIRECTIONAL;	// Bimode 0
 8001384:	4b25      	ldr	r3, [pc, #148]	@ (800141c <spi_init_config+0xa8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a24      	ldr	r2, [pc, #144]	@ (800141c <spi_init_config+0xa8>)
 800138a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800138e:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_CRCEN_CRC_ENABLE;
 8001390:	4b22      	ldr	r3, [pc, #136]	@ (800141c <spi_init_config+0xa8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	@ (800141c <spi_init_config+0xa8>)
 8001396:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800139a:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_RXONLY_RECEIVE_ONLY_MODE;		// Select full-duplex
 800139c:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <spi_init_config+0xa8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <spi_init_config+0xa8>)
 80013a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013a6:	6013      	str	r3, [r2, #0]
	//HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_SSM_SW_MANAGEMENT_ENABLE;	// HARDWARE slave
	HW_REG(SPI1+SPI_CR1) |= SPI_CR1_SSM_SW_MANAGEMENT_ENABLE;		// Software slave
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <spi_init_config+0xa8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <spi_init_config+0xa8>)
 80013ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013b2:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) |= SPI_CR1_SSI_ENABLE;		// SSI enable
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <spi_init_config+0xa8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a18      	ldr	r2, [pc, #96]	@ (800141c <spi_init_config+0xa8>)
 80013ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013be:	6013      	str	r3, [r2, #0]

	// SPI clock frequency max 18 MHz
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_BR_F_DIV2;	// sysclk 8Mhz, div2 = 4MHz
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <spi_init_config+0xa8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a15      	ldr	r2, [pc, #84]	@ (800141c <spi_init_config+0xa8>)
 80013c6:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80013ca:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_CPOL_IDLE_HIGH;				// idle low
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <spi_init_config+0xa8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a12      	ldr	r2, [pc, #72]	@ (800141c <spi_init_config+0xa8>)
 80013d2:	f023 0302 	bic.w	r3, r3, #2
 80013d6:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_CPHA_SECOND_CLOCK_TRANSITION;	// low transition
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <spi_init_config+0xa8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <spi_init_config+0xa8>)
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_DFF_16BIT_DATA_FRAME;			// 8bit data frame
 80013e4:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <spi_init_config+0xa8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <spi_init_config+0xa8>)
 80013ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80013ee:	6013      	str	r3, [r2, #0]
	HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_LSBFIRST_LSB;					// MSB first
 80013f0:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <spi_init_config+0xa8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a09      	ldr	r2, [pc, #36]	@ (800141c <spi_init_config+0xa8>)
 80013f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80013fa:	6013      	str	r3, [r2, #0]

	//HW_REG(SPI1+SPI_CR2) |= SPI_CR2_SSOE_ENABLE;	//HARDWARE SLAVE

	HW_REG(SPI1+SPI_CR1) |= SPI_CR1_MSTR_MASTER_CONFIGURATION;		// select master
 80013fc:	4b07      	ldr	r3, [pc, #28]	@ (800141c <spi_init_config+0xa8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a06      	ldr	r2, [pc, #24]	@ (800141c <spi_init_config+0xa8>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6013      	str	r3, [r2, #0]

	HW_REG(SPI1+SPI_CR2) = 0;
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <spi_init_config+0xac>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
	//Enable SPI
	//HW_REG(SPI1+SPI_CR1) |= SPI_CR1_SPE_ENABLE;	//Software slave
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021018 	.word	0x40021018
 800141c:	40013000 	.word	0x40013000
 8001420:	40013004 	.word	0x40013004

08001424 <spi_transmit_data>:

unsigned char spi_transmit_data(unsigned char* tx_data, int size){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
#ifdef USE_SPI_DMA
	unsigned char dummy_rx_buffer;
	spi_transmit_dma(SPI1+SPI_DR, (unsigned int)tx_data, (unsigned int)&dummy_rx_buffer, size);
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f107 020f 	add.w	r2, r7, #15
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <spi_transmit_data+0x24>)
 800143a:	f7ff f85d 	bl	80004f8 <spi_transmit_dma>
	return 0;
 800143e:	2300      	movs	r3, #0
	//HW_REG(SPI1+SPI_CR1) &= ~SPI_CR1_SPE_ENABLE;	//HARDWARE slave
	//HW_REG(SPI1+SPI_CR1) |= SPI_CR1_SSI_ENABLE;	//Software slave
	HW_REG(SPI1+SPI_DR);
	return (unsigned char)(HW_REG(SPI1+SPI_SR));
#endif
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	4001300c 	.word	0x4001300c

0800144c <spi_receive_data>:


unsigned char spi_receive_data(unsigned char* rx_data, int size){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
#ifdef USE_SPI_DMA
	unsigned char dummy_tx_buffer = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
	spi_receive_dma(SPI1+SPI_DR, (unsigned int)&dummy_tx_buffer, (unsigned int)rx_data, size);
 800145a:	f107 010f 	add.w	r1, r7, #15
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <spi_receive_data+0x28>)
 8001466:	f7ff f8a5 	bl	80005b4 <spi_receive_dma>
	}

	while(!(HW_REG(SPI1+SPI_SR) & SPI_SR_TXE_TX_BUFFER_EMPTY)){};
	while(HW_REG(SPI1+SPI_SR) & SPI_SR_BSY){};
#endif
	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	4001300c 	.word	0x4001300c

08001478 <systick_init_config>:

void systick_isr_callback(){
	g_systick_flag = 35;
}

void __attribute__((weak)) systick_init_config(unsigned int ticks){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	HW_REG(STK+STK_CTRL) &= ~STK_CTRL_COUNTFLAG;
	HW_REG(STK+STK_CTRL) &= ~STK_CTRL_CLKSOURCE;
	HW_REG(STK+STK_CTRL) &= ~STK_CTRL_TICKINT;
	HW_REG(STK+STK_CTRL) |= STK_CTRL_ENABLE;
*/
    HW_REG(STK+STK_LOAD) = (ticks - 1) & STK_LOAD_RELOAD_MASK;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	4a0b      	ldr	r2, [pc, #44]	@ (80014b4 <systick_init_config+0x3c>)
 8001486:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800148a:	6013      	str	r3, [r2, #0]
    //HW_REG(STK + STK_CTRL) = (STK_CTRL_CLKSOURCE | STK_CTRL_TICKINT | STK_CTRL_ENABLE);
    HW_REG(STK + STK_VAL) = 0;
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <systick_init_config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
    HW_REG(STK + STK_CTRL) &= ~STK_CTRL_CLKSOURCE;
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <systick_init_config+0x44>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a09      	ldr	r2, [pc, #36]	@ (80014bc <systick_init_config+0x44>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6013      	str	r3, [r2, #0]
    HW_REG(STK + STK_CTRL) |= (STK_CTRL_TICKINT | STK_CTRL_ENABLE);
 800149e:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <systick_init_config+0x44>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <systick_init_config+0x44>)
 80014a4:	f043 0303 	orr.w	r3, r3, #3
 80014a8:	6013      	str	r3, [r2, #0]

    //NVIC_SetPriority(RTCAlarm_IRQ,0x10); // Priority level 1

    //NVIC_EnableIRQ(RTCAlarm_IRQ);	// Enable EXTI17 interrupt on NVIC
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e014 	.word	0xe000e014
 80014b8:	e000e018 	.word	0xe000e018
 80014bc:	e000e010 	.word	0xe000e010

080014c0 <delay_ir_init>:

#include "HW_types.h"
#include "TIMER_utils.h"
#include "RCC_utils.h"

void delay_ir_init(void){
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
    HW_REG(RCCA+RCC_APB1ENR) |= RCC_APB1ENR_TIM2EN_CLOCK_ENABLE; // Enable TIM2 clock
 80014c4:	4b09      	ldr	r3, [pc, #36]	@ (80014ec <delay_ir_init+0x2c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a08      	ldr	r2, [pc, #32]	@ (80014ec <delay_ir_init+0x2c>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER2+TIMx_PSC) = 8 - 1;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <delay_ir_init+0x30>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER2+TIMx_ARR) = AUTO_RELOAD_VALUE; // auto-reload value
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <delay_ir_init+0x34>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER2 + TIMx_EGR) = TIM_EGR_UG;
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <delay_ir_init+0x38>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	4002101c 	.word	0x4002101c
 80014f0:	40000028 	.word	0x40000028
 80014f4:	4000002c 	.word	0x4000002c
 80014f8:	40000014 	.word	0x40000014

080014fc <__NVIC_EnableIRQ>:
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4906      	ldr	r1, [pc, #24]	@ (8001530 <__NVIC_EnableIRQ+0x34>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100

08001534 <usart1_clock_config>:

int current_temp_index = 5;  // índice da temperatura 23°C



void usart1_clock_config(void) {
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    HW_REG(RCC_BASE + RCC_APB2ENR) |= IOPAEN | USART1EN;
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <usart1_clock_config+0x1c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <usart1_clock_config+0x1c>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6013      	str	r3, [r2, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	40021018 	.word	0x40021018

08001554 <usart1_gpio_config>:

void usart1_gpio_config(void) {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
    // PA9 TX AF‑PP
    HW_REG(GPIO_A_BASE + GPIO_CRH_OFFSET) &= ~(0xF << 4);
 8001558:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <usart1_gpio_config+0x3c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0c      	ldr	r2, [pc, #48]	@ (8001590 <usart1_gpio_config+0x3c>)
 800155e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001562:	6013      	str	r3, [r2, #0]
    HW_REG(GPIO_A_BASE + GPIO_CRH_OFFSET) |=  (0xB << 4);
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <usart1_gpio_config+0x3c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	@ (8001590 <usart1_gpio_config+0x3c>)
 800156a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800156e:	6013      	str	r3, [r2, #0]
    // PA10 RX input floating
    HW_REG(GPIO_A_BASE + GPIO_CRH_OFFSET) &= ~(0xF << 8);
 8001570:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <usart1_gpio_config+0x3c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a06      	ldr	r2, [pc, #24]	@ (8001590 <usart1_gpio_config+0x3c>)
 8001576:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800157a:	6013      	str	r3, [r2, #0]
    HW_REG(GPIO_A_BASE + GPIO_CRH_OFFSET) |=  (0x4 << 8);
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <usart1_gpio_config+0x3c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a03      	ldr	r2, [pc, #12]	@ (8001590 <usart1_gpio_config+0x3c>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	40010804 	.word	0x40010804

08001594 <usart1_init_config>:

void usart1_init_config(void) {
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
    // divisor de baud
    HW_REG(USART1_BASE + USART_BRR) = (CPU_CLK + BAUD_RATE/2) / BAUD_RATE;
 8001598:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <usart1_init_config+0x1c>)
 800159a:	2245      	movs	r2, #69	@ 0x45
 800159c:	601a      	str	r2, [r3, #0]
    // habilita RX, TX, RXNEIE e USART
    HW_REG(USART1_BASE + USART_CR1) = USART_RE | USART_TE | USART_RXNEIE | USART_UE;
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <usart1_init_config+0x20>)
 80015a0:	f242 022c 	movw	r2, #8236	@ 0x202c
 80015a4:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(37);
 80015a6:	2025      	movs	r0, #37	@ 0x25
 80015a8:	f7ff ffa8 	bl	80014fc <__NVIC_EnableIRQ>
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013808 	.word	0x40013808
 80015b4:	4001380c 	.word	0x4001380c

080015b8 <USART1_IRQHandler>:
        HW_REG8(USART1_BASE + USART_DR) = *s++;
    }
}

// ISR de recepção
void USART1_IRQHandler(void) {
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
    if (HW_REG(USART1_BASE + USART_SR) & USART_RXNE) {
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <USART1_IRQHandler+0x64>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d023      	beq.n	8001612 <USART1_IRQHandler+0x5a>
        char c = HW_REG8(USART1_BASE + USART_DR);
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <USART1_IRQHandler+0x68>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
        if (c != '\n' && c != '\r' && rx_index < BUF_SIZE-1) {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b0a      	cmp	r3, #10
 80015d4:	d011      	beq.n	80015fa <USART1_IRQHandler+0x42>
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2b0d      	cmp	r3, #13
 80015da:	d00e      	beq.n	80015fa <USART1_IRQHandler+0x42>
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <USART1_IRQHandler+0x6c>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80015e2:	d80a      	bhi.n	80015fa <USART1_IRQHandler+0x42>
            rx_buffer[rx_index++] = c;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <USART1_IRQHandler+0x6c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	b2d1      	uxtb	r1, r2
 80015ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001624 <USART1_IRQHandler+0x6c>)
 80015ee:	7011      	strb	r1, [r2, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <USART1_IRQHandler+0x70>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	5453      	strb	r3, [r2, r1]
            rx_buffer[rx_index] = '\0';
            rx_index = 0;
            command_ready = 1;
        }
    }
}
 80015f8:	e00b      	b.n	8001612 <USART1_IRQHandler+0x5a>
            rx_buffer[rx_index] = '\0';
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <USART1_IRQHandler+0x6c>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <USART1_IRQHandler+0x70>)
 8001602:	2100      	movs	r1, #0
 8001604:	5499      	strb	r1, [r3, r2]
            rx_index = 0;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <USART1_IRQHandler+0x6c>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
            command_ready = 1;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <USART1_IRQHandler+0x74>)
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40013800 	.word	0x40013800
 8001620:	40013804 	.word	0x40013804
 8001624:	20000090 	.word	0x20000090
 8001628:	20000050 	.word	0x20000050
 800162c:	20000091 	.word	0x20000091

08001630 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001630:	480d      	ldr	r0, [pc, #52]	@ (8001668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001632:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001634:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <LoopForever+0x6>)
  ldr r1, =_edata
 800163a:	490d      	ldr	r1, [pc, #52]	@ (8001670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <LoopForever+0xe>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001650:	4c0a      	ldr	r4, [pc, #40]	@ (800167c <LoopForever+0x16>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165e:	f000 f819 	bl	8001694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001662:	f7ff f8d1 	bl	8000808 <main>

08001666 <LoopForever>:

LoopForever:
  b LoopForever
 8001666:	e7fe      	b.n	8001666 <LoopForever>
  ldr   r0, =_estack
 8001668:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001674:	0800171c 	.word	0x0800171c
  ldr r2, =_sbss
 8001678:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800167c:	20000094 	.word	0x20000094

08001680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC1_2_IRQHandler>

08001682 <memset>:
 8001682:	4603      	mov	r3, r0
 8001684:	4402      	add	r2, r0
 8001686:	4293      	cmp	r3, r2
 8001688:	d100      	bne.n	800168c <memset+0xa>
 800168a:	4770      	bx	lr
 800168c:	f803 1b01 	strb.w	r1, [r3], #1
 8001690:	e7f9      	b.n	8001686 <memset+0x4>
	...

08001694 <__libc_init_array>:
 8001694:	b570      	push	{r4, r5, r6, lr}
 8001696:	2600      	movs	r6, #0
 8001698:	4d0c      	ldr	r5, [pc, #48]	@ (80016cc <__libc_init_array+0x38>)
 800169a:	4c0d      	ldr	r4, [pc, #52]	@ (80016d0 <__libc_init_array+0x3c>)
 800169c:	1b64      	subs	r4, r4, r5
 800169e:	10a4      	asrs	r4, r4, #2
 80016a0:	42a6      	cmp	r6, r4
 80016a2:	d109      	bne.n	80016b8 <__libc_init_array+0x24>
 80016a4:	f000 f81a 	bl	80016dc <_init>
 80016a8:	2600      	movs	r6, #0
 80016aa:	4d0a      	ldr	r5, [pc, #40]	@ (80016d4 <__libc_init_array+0x40>)
 80016ac:	4c0a      	ldr	r4, [pc, #40]	@ (80016d8 <__libc_init_array+0x44>)
 80016ae:	1b64      	subs	r4, r4, r5
 80016b0:	10a4      	asrs	r4, r4, #2
 80016b2:	42a6      	cmp	r6, r4
 80016b4:	d105      	bne.n	80016c2 <__libc_init_array+0x2e>
 80016b6:	bd70      	pop	{r4, r5, r6, pc}
 80016b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016bc:	4798      	blx	r3
 80016be:	3601      	adds	r6, #1
 80016c0:	e7ee      	b.n	80016a0 <__libc_init_array+0xc>
 80016c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016c6:	4798      	blx	r3
 80016c8:	3601      	adds	r6, #1
 80016ca:	e7f2      	b.n	80016b2 <__libc_init_array+0x1e>
 80016cc:	08001714 	.word	0x08001714
 80016d0:	08001714 	.word	0x08001714
 80016d4:	08001714 	.word	0x08001714
 80016d8:	08001718 	.word	0x08001718

080016dc <_init>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr

080016e8 <_fini>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr
