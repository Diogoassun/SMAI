
pratica0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000678  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080007a8  080007a8  000017a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007b8  080007b8  000017c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007b8  080007b8  000017c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007b8  080007c0  000017c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007b8  080007b8  000017b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007bc  080007bc  000017bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007c0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007a6  00000000  00000000  000017e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040e  00000000  00000000  00001f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000023a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d2  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001717  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000196c  00000000  00000000  00003cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000703f  00000000  00000000  00005635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000c674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c4  00000000  00000000  0000c6b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0000c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000790 	.word	0x08000790

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000790 	.word	0x08000790

08000170 <RTCAlarm_IRQHandler>:
#include "HW_types.h"
#include "GPIO_registers.h"
#include "RTC_utils.h"
#include "DMA_utils.h"

void  __attribute__((weak)) RTCAlarm_IRQHandler(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (HW_REG(RTC+RTC_CRL) & RTC_CRL_ALRF){
 8000174:	4b1e      	ldr	r3, [pc, #120]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f003 0302 	and.w	r3, r3, #2
 800017c:	2b00      	cmp	r3, #0
 800017e:	d033      	beq.n	80001e8 <RTCAlarm_IRQHandler+0x78>

		//HW_REG(GPIO_C+GPIOx_BSRR) |= (1<<13);	//Reset C13
		//for(volatile int i=0;i<100000;i++);

		{
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 8000180:	bf00      	nop
 8000182:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0320 	and.w	r3, r3, #32
 800018a:	2b20      	cmp	r3, #32
 800018c:	d1f9      	bne.n	8000182 <RTCAlarm_IRQHandler+0x12>
			HW_REG(RTC+RTC_CRL) |= (ENTER_CONFIGURATION_MODE); //To write RTC_PRL, RTC_CNT, RTC_ALR
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a17      	ldr	r2, [pc, #92]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6013      	str	r3, [r2, #0]

			//HW_REG(RTC+RTC_CNTH) = 0;	//RW
			//HW_REG(RTC+RTC_CNTL) = 0;	//RW

			HW_REG(RTC+RTC_ALRH) = 0;	//Only Write
 800019a:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <RTCAlarm_IRQHandler+0x84>)
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
			HW_REG(RTC+RTC_ALRL) = HW_REG(RTC+RTC_ALRL) + 1;	//Only Write
 80001a0:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <RTCAlarm_IRQHandler+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a14      	ldr	r2, [pc, #80]	@ (80001f8 <RTCAlarm_IRQHandler+0x88>)
 80001a6:	3301      	adds	r3, #1
 80001a8:	6013      	str	r3, [r2, #0]

			HW_REG(RTC+RTC_CRL) &= ~(ENTER_CONFIGURATION_MODE);
 80001aa:	4b11      	ldr	r3, [pc, #68]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a10      	ldr	r2, [pc, #64]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001b0:	f023 0310 	bic.w	r3, r3, #16
 80001b4:	6013      	str	r3, [r2, #0]
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 80001b6:	bf00      	nop
 80001b8:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f003 0320 	and.w	r3, r3, #32
 80001c0:	2b20      	cmp	r3, #32
 80001c2:	d1f9      	bne.n	80001b8 <RTCAlarm_IRQHandler+0x48>
		}

		HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 80001c4:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a09      	ldr	r2, [pc, #36]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ca:	f023 0302 	bic.w	r3, r3, #2
 80001ce:	6013      	str	r3, [r2, #0]
		HW_REG(EXTI+EXTI_PR) |= (1<<17);
 80001d0:	4b0a      	ldr	r3, [pc, #40]	@ (80001fc <RTCAlarm_IRQHandler+0x8c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a09      	ldr	r2, [pc, #36]	@ (80001fc <RTCAlarm_IRQHandler+0x8c>)
 80001d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001da:	6013      	str	r3, [r2, #0]
		HW_REG(RTC+RTC_CRH) |= RTC_CRH_ALRIE;
 80001dc:	4b08      	ldr	r3, [pc, #32]	@ (8000200 <RTCAlarm_IRQHandler+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	@ (8000200 <RTCAlarm_IRQHandler+0x90>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	6013      	str	r3, [r2, #0]
	}
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40002804 	.word	0x40002804
 80001f4:	40002820 	.word	0x40002820
 80001f8:	40002824 	.word	0x40002824
 80001fc:	40010414 	.word	0x40010414
 8000200:	40002800 	.word	0x40002800

08000204 <SPI1_IRQHandler>:

void __attribute__((weak)) SPI1_IRQHandler(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <DMA1_Channel2_IRQHandler>:

void __attribute__((weak)) DMA1_Channel2_IRQHandler(void){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
 8000214:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <DMA1_Channel2_IRQHandler+0x14>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a02      	ldr	r2, [pc, #8]	@ (8000224 <DMA1_Channel2_IRQHandler+0x14>)
 800021a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800021e:	6013      	str	r3, [r2, #0]
	while(1){};
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <DMA1_Channel2_IRQHandler+0x10>
 8000224:	4001100c 	.word	0x4001100c

08000228 <DMA1_Channel3_IRQHandler>:
	if((HW_REG(DMA1+DMA_ISR)>>4) & DMA_ISR_TCIFx){
		HW_REG(DMA1+DMA_IFCR) &= DMA_IFCR_CTCIFx<<4;
	}
}

void DMA1_Channel3_IRQHandler(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	//HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_HTIFx){
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <DMA1_Channel3_IRQHandler+0x3c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000234:	2b00      	cmp	r3, #0
 8000236:	d005      	beq.n	8000244 <DMA1_Channel3_IRQHandler+0x1c>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CHTIFx<<8;
 8000238:	4b0b      	ldr	r3, [pc, #44]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 800023e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000242:	6013      	str	r3, [r2, #0]
	}
	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_TCIFx){
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <DMA1_Channel3_IRQHandler+0x3c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800024c:	2b00      	cmp	r3, #0
 800024e:	d005      	beq.n	800025c <DMA1_Channel3_IRQHandler+0x34>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CTCIFx<<8;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 8000256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800025a:	6013      	str	r3, [r2, #0]
	}
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40020000 	.word	0x40020000
 8000268:	40020004 	.word	0x40020004

0800026c <gpio_init_config>:
#define PA8_CNF_MODE		((0b10 << 2) | (GPIOx_CRLH_MODE_50MHz << 0))
#define IR_ENABLE_PIN		PA8_CNF_MODE

// end IR pins

void __attribute__((weak)) gpio_init_config(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOCEEN_CLOCK_ENABLE);	//Enable GPIOC Clock
 8000270:	4b39      	ldr	r3, [pc, #228]	@ (8000358 <gpio_init_config+0xec>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a38      	ldr	r2, [pc, #224]	@ (8000358 <gpio_init_config+0xec>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_BSRR) = PC13;	//Reset C13
 800027c:	4b37      	ldr	r3, [pc, #220]	@ (800035c <gpio_init_config+0xf0>)
 800027e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000282:	601a      	str	r2, [r3, #0]

	//  Analog mode all
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xFFFF);
	//HW_REG(GPIO_C+GPIOx_CRL) &= ~(0xFFFF);

	HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xF<<20);	//Set C13 as Output
 8000284:	4b36      	ldr	r3, [pc, #216]	@ (8000360 <gpio_init_config+0xf4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a35      	ldr	r2, [pc, #212]	@ (8000360 <gpio_init_config+0xf4>)
 800028a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800028e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_CRH) |= (0x2<<20);	//Set C13 max speed 2MHz
 8000290:	4b33      	ldr	r3, [pc, #204]	@ (8000360 <gpio_init_config+0xf4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a32      	ldr	r2, [pc, #200]	@ (8000360 <gpio_init_config+0xf4>)
 8000296:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029a:	6013      	str	r3, [r2, #0]
	// Exemplo para restaurar pinos PC14/15 ao estado adequado (modo analógico)
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~((0xF << ((14 - 8) * 4)) | (0xF << ((15 - 8) * 4)));
	//HW_REG(GPIO_C+GPIOx_CRH) |= ((0x0 << ((14 - 8) * 4)) | (0x0 << ((15 - 8) * 4))); // Analog input

	// SPI configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOAEEN_CLOCK_ENABLE);	// Enable GPIOA Clock
 800029c:	4b2e      	ldr	r3, [pc, #184]	@ (8000358 <gpio_init_config+0xec>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2d      	ldr	r2, [pc, #180]	@ (8000358 <gpio_init_config+0xec>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) &= ~(0xFFFFF000);			// Clear CNF and MODE A7-A2
 80002a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000364 <gpio_init_config+0xf8>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000364 <gpio_init_config+0xf8>)
 80002ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002b2:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_ODR) &= ~PA3;			// Reset A3
 80002b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000368 <gpio_init_config+0xfc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000368 <gpio_init_config+0xfc>)
 80002ba:	f023 0308 	bic.w	r3, r3, #8
 80002be:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= PA3_CNF_MODE;	// CE
 80002c0:	4b28      	ldr	r3, [pc, #160]	@ (8000364 <gpio_init_config+0xf8>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a27      	ldr	r2, [pc, #156]	@ (8000364 <gpio_init_config+0xf8>)
 80002c6:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80002ca:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_CLK;	// CLK Master Alternate function push-pull
 80002cc:	4b25      	ldr	r3, [pc, #148]	@ (8000364 <gpio_init_config+0xf8>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a24      	ldr	r2, [pc, #144]	@ (8000364 <gpio_init_config+0xf8>)
 80002d2:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 80002d6:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MOSI;	// MOSI Full duplex / master Alternate function push-pull
 80002d8:	4b22      	ldr	r3, [pc, #136]	@ (8000364 <gpio_init_config+0xf8>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a21      	ldr	r2, [pc, #132]	@ (8000364 <gpio_init_config+0xf8>)
 80002de:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 80002e2:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MISO;	// MISO Full duplex / master Input floating / Input pull-up
 80002e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000364 <gpio_init_config+0xf8>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000364 <gpio_init_config+0xf8>)
 80002ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80002ee:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_NSS;	// NSS Software
 80002f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000364 <gpio_init_config+0xf8>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000364 <gpio_init_config+0xf8>)
 80002f6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80002fa:	6013      	str	r3, [r2, #0]
	// afio_init_config();

	// I2C configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOBEEN_CLOCK_ENABLE);	// Enable GPIOB Clock
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <gpio_init_config+0xec>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a15      	ldr	r2, [pc, #84]	@ (8000358 <gpio_init_config+0xec>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) &= ~(0xFF000000);			// Clear CNF and MODE B7-B6
 8000308:	4b18      	ldr	r3, [pc, #96]	@ (800036c <gpio_init_config+0x100>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a17      	ldr	r2, [pc, #92]	@ (800036c <gpio_init_config+0x100>)
 800030e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000312:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) |= I2C_CLK;	// I2C clock Alternate function open drain
 8000314:	4b15      	ldr	r3, [pc, #84]	@ (800036c <gpio_init_config+0x100>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a14      	ldr	r2, [pc, #80]	@ (800036c <gpio_init_config+0x100>)
 800031a:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 800031e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) |= I2C_SDA;	// I2C Data I/O Alternate function open drain
 8000320:	4b12      	ldr	r3, [pc, #72]	@ (800036c <gpio_init_config+0x100>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a11      	ldr	r2, [pc, #68]	@ (800036c <gpio_init_config+0x100>)
 8000326:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800032a:	6013      	str	r3, [r2, #0]
	// afio_init_config();

	//IR configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOAEEN_CLOCK_ENABLE);	// Enable GPIOA Clock
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <gpio_init_config+0xec>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <gpio_init_config+0xec>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A + GPIOx_CRH) &= ~((0x3 << 0) | (0x3 << 2));
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <gpio_init_config+0x104>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a0c      	ldr	r2, [pc, #48]	@ (8000370 <gpio_init_config+0x104>)
 800033e:	f023 030f 	bic.w	r3, r3, #15
 8000342:	6013      	str	r3, [r2, #0]
//	HW_REG(GPIO_A + GPIOx_CRH) |= (GPIOx_CRLH_MODE_50MHz << 0);   /* MODE8 = 11 (50 MHz) */
//	HW_REG(GPIO_A + GPIOx_CRH) |= (0b10 << 2); /* CNF8  = 10 (AF‑PP) */
	HW_REG(GPIO_A + GPIOx_CRH) |= IR_ENABLE_PIN;
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <gpio_init_config+0x104>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a09      	ldr	r2, [pc, #36]	@ (8000370 <gpio_init_config+0x104>)
 800034a:	f043 030b 	orr.w	r3, r3, #11
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	40021018 	.word	0x40021018
 800035c:	40011010 	.word	0x40011010
 8000360:	40011004 	.word	0x40011004
 8000364:	40010800 	.word	0x40010800
 8000368:	4001080c 	.word	0x4001080c
 800036c:	40010c00 	.word	0x40010c00
 8000370:	40010804 	.word	0x40010804

08000374 <ir_send_generic>:
    uint16_t onemark, uint32_t onespace,
    uint16_t zeromark, uint32_t zerospace,
    uint16_t footermark, uint32_t gap,
    const uint8_t *data, uint16_t nbytes,
    bool msb_first, uint16_t repeat
) {
 8000374:	b580      	push	{r7, lr}
 8000376:	b086      	sub	sp, #24
 8000378:	af00      	add	r7, sp, #0
 800037a:	60b9      	str	r1, [r7, #8]
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	4603      	mov	r3, r0
 8000380:	81fb      	strh	r3, [r7, #14]
 8000382:	4613      	mov	r3, r2
 8000384:	81bb      	strh	r3, [r7, #12]
    for (uint16_t r = 0; r <= repeat; r++) {
 8000386:	2300      	movs	r3, #0
 8000388:	82fb      	strh	r3, [r7, #22]
 800038a:	e068      	b.n	800045e <ir_send_generic+0xea>
        if (headermark) ir_mark(headermark);
 800038c:	89fb      	ldrh	r3, [r7, #14]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d003      	beq.n	800039a <ir_send_generic+0x26>
 8000392:	89fb      	ldrh	r3, [r7, #14]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 f939 	bl	800060c <ir_mark>
        if (headerspace) ir_space(headerspace);
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d002      	beq.n	80003a6 <ir_send_generic+0x32>
 80003a0:	68b8      	ldr	r0, [r7, #8]
 80003a2:	f000 f951 	bl	8000648 <ir_space>

        for (uint16_t i = 0; i < nbytes; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	82bb      	strh	r3, [r7, #20]
 80003aa:	e040      	b.n	800042e <ir_send_generic+0xba>
            uint8_t byte = data[i];
 80003ac:	8abb      	ldrh	r3, [r7, #20]
 80003ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	74bb      	strb	r3, [r7, #18]
            for (uint8_t j = 0; j < 8; j++) {
 80003b6:	2300      	movs	r3, #0
 80003b8:	74fb      	strb	r3, [r7, #19]
 80003ba:	e032      	b.n	8000422 <ir_send_generic+0xae>
                bool bit = msb_first ? (byte & (1 << (7 - j))) : (byte & (1 << j));
 80003bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00d      	beq.n	80003e0 <ir_send_generic+0x6c>
 80003c4:	7cba      	ldrb	r2, [r7, #18]
 80003c6:	7cfb      	ldrb	r3, [r7, #19]
 80003c8:	f1c3 0307 	rsb	r3, r3, #7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4013      	ands	r3, r2
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	bf14      	ite	ne
 80003d8:	2301      	movne	r3, #1
 80003da:	2300      	moveq	r3, #0
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	e00a      	b.n	80003f6 <ir_send_generic+0x82>
 80003e0:	7cba      	ldrb	r2, [r7, #18]
 80003e2:	7cfb      	ldrb	r3, [r7, #19]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4013      	ands	r3, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	747b      	strb	r3, [r7, #17]
                if (bit) {
 80003f8:	7c7b      	ldrb	r3, [r7, #17]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d007      	beq.n	800040e <ir_send_generic+0x9a>
                    ir_mark(onemark);
 80003fe:	89bb      	ldrh	r3, [r7, #12]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f903 	bl	800060c <ir_mark>
                    ir_space(onespace);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f91e 	bl	8000648 <ir_space>
 800040c:	e006      	b.n	800041c <ir_send_generic+0xa8>
                } else {
                    ir_mark(zeromark);
 800040e:	8c3b      	ldrh	r3, [r7, #32]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f8fb 	bl	800060c <ir_mark>
                    ir_space(zerospace);
 8000416:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000418:	f000 f916 	bl	8000648 <ir_space>
            for (uint8_t j = 0; j < 8; j++) {
 800041c:	7cfb      	ldrb	r3, [r7, #19]
 800041e:	3301      	adds	r3, #1
 8000420:	74fb      	strb	r3, [r7, #19]
 8000422:	7cfb      	ldrb	r3, [r7, #19]
 8000424:	2b07      	cmp	r3, #7
 8000426:	d9c9      	bls.n	80003bc <ir_send_generic+0x48>
        for (uint16_t i = 0; i < nbytes; i++) {
 8000428:	8abb      	ldrh	r3, [r7, #20]
 800042a:	3301      	adds	r3, #1
 800042c:	82bb      	strh	r3, [r7, #20]
 800042e:	8aba      	ldrh	r2, [r7, #20]
 8000430:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000432:	429a      	cmp	r2, r3
 8000434:	d3ba      	bcc.n	80003ac <ir_send_generic+0x38>
                }
            }
        }

        if (footermark) ir_mark(footermark);
 8000436:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000438:	2b00      	cmp	r3, #0
 800043a:	d003      	beq.n	8000444 <ir_send_generic+0xd0>
 800043c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f8e4 	bl	800060c <ir_mark>
        if (gap > 0 && r < repeat) ir_space(gap);
 8000444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000446:	2b00      	cmp	r3, #0
 8000448:	d006      	beq.n	8000458 <ir_send_generic+0xe4>
 800044a:	8afa      	ldrh	r2, [r7, #22]
 800044c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800044e:	429a      	cmp	r2, r3
 8000450:	d202      	bcs.n	8000458 <ir_send_generic+0xe4>
 8000452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000454:	f000 f8f8 	bl	8000648 <ir_space>
    for (uint16_t r = 0; r <= repeat; r++) {
 8000458:	8afb      	ldrh	r3, [r7, #22]
 800045a:	3301      	adds	r3, #1
 800045c:	82fb      	strh	r3, [r7, #22]
 800045e:	8afa      	ldrh	r2, [r7, #22]
 8000460:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000462:	429a      	cmp	r2, r3
 8000464:	d992      	bls.n	800038c <ir_send_generic+0x18>
    }
}
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	3718      	adds	r7, #24
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}

08000470 <ir_send_hitachi_ac>:

void ir_send_hitachi_ac(const uint8_t *data, uint16_t nbytes, uint16_t repeat){
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	@ 0x28
 8000474:	af08      	add	r7, sp, #32
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	460b      	mov	r3, r1
 800047a:	807b      	strh	r3, [r7, #2]
 800047c:	4613      	mov	r3, r2
 800047e:	803b      	strh	r3, [r7, #0]
    ir_send_generic(
 8000480:	883b      	ldrh	r3, [r7, #0]
 8000482:	9307      	str	r3, [sp, #28]
 8000484:	2300      	movs	r3, #0
 8000486:	9306      	str	r3, [sp, #24]
 8000488:	887b      	ldrh	r3, [r7, #2]
 800048a:	9305      	str	r3, [sp, #20]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	9304      	str	r3, [sp, #16]
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <ir_send_hitachi_ac+0x54>)
 8000492:	9303      	str	r3, [sp, #12]
 8000494:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	f240 1345 	movw	r3, #325	@ 0x145
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	f240 431a 	movw	r3, #1050	@ 0x41a
 80004aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80004ae:	f240 6172 	movw	r1, #1650	@ 0x672
 80004b2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80004b6:	f7ff ff5d 	bl	8000374 <ir_send_generic>
        ONEMARKHITACHIAC, ONESPACEMARKHITACHIAC,
        ZEROMARKHITACHIAC, ZEROSPACEMARKHITACHIAC,
        FOOTERMARKHITACHIAC, GAPHITACHIAC,
        data, nbytes, MSB_FIRST_HITACHIAC, repeat
    );
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	000186a0 	.word	0x000186a0

080004c8 <main>:
unsigned char rx_address[5] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
unsigned char tx_data[] = "HELLO WORLD\n";
unsigned char rx_data[32] = {};

int main(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b08b      	sub	sp, #44	@ 0x2c
 80004cc:	af00      	add	r7, sp, #0
	__UNUSED(data) = ((int)&_edata) - (int)&_sdata;
 80004ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000540 <main+0x78>)
 80004d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <main+0x7c>)
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	627b      	str	r3, [r7, #36]	@ 0x24
	__UNUSED(bss) = ((int)&_ebss) - (int)&_sdata;
 80004d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000548 <main+0x80>)
 80004d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000544 <main+0x7c>)
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	623b      	str	r3, [r7, #32]
	__UNUSED(size_app) = ((int)&_eflash) - (int)&_sflash;
 80004de:	4a1b      	ldr	r2, [pc, #108]	@ (800054c <main+0x84>)
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <main+0x88>)
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	61fb      	str	r3, [r7, #28]
	__UNUSED(bank) = size_app/1024;
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	da01      	bge.n	80004f0 <main+0x28>
 80004ec:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 80004f0:	129b      	asrs	r3, r3, #10
 80004f2:	61bb      	str	r3, [r7, #24]
	__UNUSED(setor) = size_app%1024;
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	425a      	negs	r2, r3
 80004f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000500:	bf58      	it	pl
 8000502:	4253      	negpl	r3, r2
 8000504:	617b      	str	r3, [r7, #20]


	gpio_init_config();
 8000506:	f7ff feb1 	bl	800026c <gpio_init_config>
	delay_ir_init();
 800050a:	f000 f8af 	bl	800066c <delay_ir_init>
	ir_init_pwm();
 800050e:	f000 f825 	bl	800055c <ir_init_pwm>

	//Teste IR
const uint8_t tcl_power_on[] = {
 8000512:	4b10      	ldr	r3, [pc, #64]	@ (8000554 <main+0x8c>)
 8000514:	1d3c      	adds	r4, r7, #4
 8000516:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000518:	c407      	stmia	r4!, {r0, r1, r2}
 800051a:	8023      	strh	r3, [r4, #0]
  0x07, 0x40, 0x00, 0x00, 0x00, 0x80, 0x03
};

	while (true)
	{
		ir_send_hitachi_ac(tcl_power_on, sizeof(tcl_power_on), 1);
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2201      	movs	r2, #1
 8000520:	210e      	movs	r1, #14
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ffa4 	bl	8000470 <ir_send_hitachi_ac>
		for (volatile int i = 0; i < 1000000; i++);
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	e002      	b.n	8000534 <main+0x6c>
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	3301      	adds	r3, #1
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	4a08      	ldr	r2, [pc, #32]	@ (8000558 <main+0x90>)
 8000538:	4293      	cmp	r3, r2
 800053a:	ddf8      	ble.n	800052e <main+0x66>
		ir_send_hitachi_ac(tcl_power_on, sizeof(tcl_power_on), 1);
 800053c:	e7ee      	b.n	800051c <main+0x54>
 800053e:	bf00      	nop
 8000540:	20000000 	.word	0x20000000
 8000544:	20000000 	.word	0x20000000
 8000548:	2000001c 	.word	0x2000001c
 800054c:	080007c0 	.word	0x080007c0
 8000550:	08000000 	.word	0x08000000
 8000554:	080007a8 	.word	0x080007a8
 8000558:	000f423f 	.word	0x000f423f

0800055c <ir_init_pwm>:

#define TIM_CCMR1_OC1M_set (0x7 << TIM_CCMR1_OC1M_Pos)
#define TIM_CCMR1_OC1M_PWM1 (0x6UL << TIM_CCMR1_OC1M_Pos) // PWM mode 1


void ir_init_pwm(void) {
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
    //enable tim1 clock
    ENABLE_CLOCK_APB2(RCC_APB2ENR_TIM1EN_CLOCK_ENABLE);
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <ir_init_pwm+0x8c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a20      	ldr	r2, [pc, #128]	@ (80005e8 <ir_init_pwm+0x8c>)
 8000566:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800056a:	6013      	str	r3, [r2, #0]

    // configure the timer for PWM in 38kHz
    HW_REG(TIMER1+TIMx_PSC) = 0; // prescaler
 800056c:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <ir_init_pwm+0x90>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER1+TIMx_ARR) = 210;
 8000572:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <ir_init_pwm+0x94>)
 8000574:	22d2      	movs	r2, #210	@ 0xd2
 8000576:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER1+TIMx_CCR1) = 0; // initial duty cycle in 0%
 8000578:	4b1e      	ldr	r3, [pc, #120]	@ (80005f4 <ir_init_pwm+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]

    // configure pwm mode
    HW_REG(TIMER1+TIMx_CCMR1) &= ~TIM_CCMR1_OC1M_set; // clear OC1M bits
 800057e:	4b1e      	ldr	r3, [pc, #120]	@ (80005f8 <ir_init_pwm+0x9c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1d      	ldr	r2, [pc, #116]	@ (80005f8 <ir_init_pwm+0x9c>)
 8000584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000588:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CCMR1) |= TIM_CCMR1_OC1M_PWM1; // set OC1M to PWM mode 1
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <ir_init_pwm+0x9c>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1a      	ldr	r2, [pc, #104]	@ (80005f8 <ir_init_pwm+0x9c>)
 8000590:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000594:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CCMR1) |= TIM_CCMR1_OC1PE; // enable preload for CCR1
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <ir_init_pwm+0x9c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a17      	ldr	r2, [pc, #92]	@ (80005f8 <ir_init_pwm+0x9c>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	6013      	str	r3, [r2, #0]

    /* ARPE + update generation */
    HW_REG(TIMER1+TIMx_CR1) |= TIM_CR1_ARPE; // ARPE bit
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <ir_init_pwm+0xa0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a15      	ldr	r2, [pc, #84]	@ (80005fc <ir_init_pwm+0xa0>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_EGR) |= TIM_EGR_UG; // UG bit to generate an update event
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <ir_init_pwm+0xa4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a13      	ldr	r2, [pc, #76]	@ (8000600 <ir_init_pwm+0xa4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

    /* Habilita saída CH1 e inicia o timer principal (com controle principal) */
    HW_REG(TIMER1+TIMx_CCER) |= TIM_CCER_CC1E_SET; // enable output CH1
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <ir_init_pwm+0xa8>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a11      	ldr	r2, [pc, #68]	@ (8000604 <ir_init_pwm+0xa8>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]

    /* Em TIM1 precisamos habilitar o “main output enable” */
    HW_REG(TIMER1+TIMx_BDTR) |= TIM_BDTR_MOE_SET; // MOE bit
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <ir_init_pwm+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <ir_init_pwm+0xac>)
 80005cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005d0:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER1+TIMx_CR1) |= TIM_CR1_CEN_SET; // enable the timer
 80005d2:	4b0a      	ldr	r3, [pc, #40]	@ (80005fc <ir_init_pwm+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a09      	ldr	r2, [pc, #36]	@ (80005fc <ir_init_pwm+0xa0>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021018 	.word	0x40021018
 80005ec:	40012c28 	.word	0x40012c28
 80005f0:	40012c2c 	.word	0x40012c2c
 80005f4:	40012c34 	.word	0x40012c34
 80005f8:	40012c18 	.word	0x40012c18
 80005fc:	40012c00 	.word	0x40012c00
 8000600:	40012c14 	.word	0x40012c14
 8000604:	40012c20 	.word	0x40012c20
 8000608:	40012c44 	.word	0x40012c44

0800060c <ir_mark>:

void ir_mark(uint32_t duration_us){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    HW_REG(TIMER1+TIMx_CCR1) = HW_REG(TIMER1+TIMx_ARR) / 3; //Duty cycle of 33%
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <ir_mark+0x30>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <ir_mark+0x34>)
 800061a:	490a      	ldr	r1, [pc, #40]	@ (8000644 <ir_mark+0x38>)
 800061c:	fba1 1303 	umull	r1, r3, r1, r3
 8000620:	085b      	lsrs	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
    delay_us_ir(duration_us);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	b29b      	uxth	r3, r3
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f83d 	bl	80006a8 <delay_us_ir>
    HW_REG(TIMER1+TIMx_CCR1) = 0; // Turn off the output
 800062e:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <ir_mark+0x34>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40012c2c 	.word	0x40012c2c
 8000640:	40012c34 	.word	0x40012c34
 8000644:	aaaaaaab 	.word	0xaaaaaaab

08000648 <ir_space>:

void ir_space(uint32_t duration_us){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
   HW_REG(TIMER1+TIMx_CCR1) = 0; // Ensure the output is off
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <ir_space+0x20>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
   delay_us_ir(duration_us);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	b29b      	uxth	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f824 	bl	80006a8 <delay_us_ir>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40012c34 	.word	0x40012c34

0800066c <delay_ir_init>:

#include "HW_types.h"
#include "TIMER_utils.h"
#include "RCC_utils.h"

void delay_ir_init(void){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    HW_REG(RCCA+RCC_APB1ENR) |= RCC_APB1ENR_TIM2EN_CLOCK_ENABLE; // Enable TIM2 clock
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <delay_ir_init+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <delay_ir_init+0x2c>)
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6013      	str	r3, [r2, #0]
    HW_REG(TIMER2+TIMx_PSC) = 8 - 1;
 800067c:	4b07      	ldr	r3, [pc, #28]	@ (800069c <delay_ir_init+0x30>)
 800067e:	2207      	movs	r2, #7
 8000680:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER2+TIMx_ARR) = AUTO_RELOAD_VALUE; // auto-reload value
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <delay_ir_init+0x34>)
 8000684:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000688:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER2 + TIMx_EGR) = TIM_EGR_UG;
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <delay_ir_init+0x38>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	4002101c 	.word	0x4002101c
 800069c:	40000028 	.word	0x40000028
 80006a0:	4000002c 	.word	0x4000002c
 80006a4:	40000014 	.word	0x40000014

080006a8 <delay_us_ir>:

void delay_us_ir(uint16_t us) {
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
    HW_REG(TIMER2+TIMx_CNT) = 0; // Reset the counter
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <delay_us_ir+0x48>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
    HW_REG(TIMER2+TIMx_CR1) |= TIM_CR1_CEN_SET; // Enable the timer
 80006b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]
    while (HW_REG(TIMER2+TIMx_CNT) < us) {
 80006c8:	bf00      	nop
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <delay_us_ir+0x48>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3fa      	bcc.n	80006ca <delay_us_ir+0x22>
        // Wait until the counter reaches the desired delay
    }
    HW_REG(TIMER2+TIMx_CR1) &= ~TIM_CR1_CEN_SET; // Disable the timer
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40000024 	.word	0x40000024

080006f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006f4:	480d      	ldr	r0, [pc, #52]	@ (800072c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <LoopForever+0x6>)
  ldr r1, =_edata
 80006fe:	490d      	ldr	r1, [pc, #52]	@ (8000734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <LoopForever+0xe>)
  movs r3, #0
 8000702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000704:	e002      	b.n	800070c <LoopCopyDataInit>

08000706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070a:	3304      	adds	r3, #4

0800070c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800070c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000710:	d3f9      	bcc.n	8000706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000714:	4c0a      	ldr	r4, [pc, #40]	@ (8000740 <LoopForever+0x16>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000718:	e001      	b.n	800071e <LoopFillZerobss>

0800071a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800071c:	3204      	adds	r2, #4

0800071e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000720:	d3fb      	bcc.n	800071a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000722:	f000 f811 	bl	8000748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fecf 	bl	80004c8 <main>

0800072a <LoopForever>:

LoopForever:
  b LoopForever
 800072a:	e7fe      	b.n	800072a <LoopForever>
  ldr   r0, =_estack
 800072c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000738:	080007c0 	.word	0x080007c0
  ldr r2, =_sbss
 800073c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000740:	2000001c 	.word	0x2000001c

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <__libc_init_array>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	2600      	movs	r6, #0
 800074c:	4d0c      	ldr	r5, [pc, #48]	@ (8000780 <__libc_init_array+0x38>)
 800074e:	4c0d      	ldr	r4, [pc, #52]	@ (8000784 <__libc_init_array+0x3c>)
 8000750:	1b64      	subs	r4, r4, r5
 8000752:	10a4      	asrs	r4, r4, #2
 8000754:	42a6      	cmp	r6, r4
 8000756:	d109      	bne.n	800076c <__libc_init_array+0x24>
 8000758:	f000 f81a 	bl	8000790 <_init>
 800075c:	2600      	movs	r6, #0
 800075e:	4d0a      	ldr	r5, [pc, #40]	@ (8000788 <__libc_init_array+0x40>)
 8000760:	4c0a      	ldr	r4, [pc, #40]	@ (800078c <__libc_init_array+0x44>)
 8000762:	1b64      	subs	r4, r4, r5
 8000764:	10a4      	asrs	r4, r4, #2
 8000766:	42a6      	cmp	r6, r4
 8000768:	d105      	bne.n	8000776 <__libc_init_array+0x2e>
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000770:	4798      	blx	r3
 8000772:	3601      	adds	r6, #1
 8000774:	e7ee      	b.n	8000754 <__libc_init_array+0xc>
 8000776:	f855 3b04 	ldr.w	r3, [r5], #4
 800077a:	4798      	blx	r3
 800077c:	3601      	adds	r6, #1
 800077e:	e7f2      	b.n	8000766 <__libc_init_array+0x1e>
 8000780:	080007b8 	.word	0x080007b8
 8000784:	080007b8 	.word	0x080007b8
 8000788:	080007b8 	.word	0x080007b8
 800078c:	080007bc 	.word	0x080007bc

08000790 <_init>:
 8000790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000792:	bf00      	nop
 8000794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000796:	bc08      	pop	{r3}
 8000798:	469e      	mov	lr, r3
 800079a:	4770      	bx	lr

0800079c <_fini>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr
