
pratica0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000964  08000964  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000964  08000964  00002010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000964  08000964  00002010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000964  08000964  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000964  08000964  00001964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000968  08000968  00001968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800096c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  0800097c  00002010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  0800097c  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b46  00000000  00000000  00002039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000502  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00003088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000103  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001568  00000000  00000000  0000330b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014f5  00000000  00000000  00004873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000dd66  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003d8  00000000  00000000  00013b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00013eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	0800094c 	.word	0x0800094c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	0800094c 	.word	0x0800094c

08000170 <RTCAlarm_IRQHandler>:
#include "HW_types.h"
#include "GPIO_registers.h"
#include "RTC_utils.h"
#include "DMA_utils.h"

void  __attribute__((weak)) RTCAlarm_IRQHandler(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if (HW_REG(RTC+RTC_CRL) & RTC_CRL_ALRF){
 8000174:	4b1e      	ldr	r3, [pc, #120]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f003 0302 	and.w	r3, r3, #2
 800017c:	2b00      	cmp	r3, #0
 800017e:	d033      	beq.n	80001e8 <RTCAlarm_IRQHandler+0x78>

		//HW_REG(GPIO_C+GPIOx_BSRR) |= (1<<13);	//Reset C13
		//for(volatile int i=0;i<100000;i++);

		{
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 8000180:	bf00      	nop
 8000182:	4b1b      	ldr	r3, [pc, #108]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f003 0320 	and.w	r3, r3, #32
 800018a:	2b20      	cmp	r3, #32
 800018c:	d1f9      	bne.n	8000182 <RTCAlarm_IRQHandler+0x12>
			HW_REG(RTC+RTC_CRL) |= (ENTER_CONFIGURATION_MODE); //To write RTC_PRL, RTC_CNT, RTC_ALR
 800018e:	4b18      	ldr	r3, [pc, #96]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a17      	ldr	r2, [pc, #92]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 8000194:	f043 0310 	orr.w	r3, r3, #16
 8000198:	6013      	str	r3, [r2, #0]

			//HW_REG(RTC+RTC_CNTH) = 0;	//RW
			//HW_REG(RTC+RTC_CNTL) = 0;	//RW

			HW_REG(RTC+RTC_ALRH) = 0;	//Only Write
 800019a:	4b16      	ldr	r3, [pc, #88]	@ (80001f4 <RTCAlarm_IRQHandler+0x84>)
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
			HW_REG(RTC+RTC_ALRL) = HW_REG(RTC+RTC_ALRL) + 1;	//Only Write
 80001a0:	4b15      	ldr	r3, [pc, #84]	@ (80001f8 <RTCAlarm_IRQHandler+0x88>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a14      	ldr	r2, [pc, #80]	@ (80001f8 <RTCAlarm_IRQHandler+0x88>)
 80001a6:	3301      	adds	r3, #1
 80001a8:	6013      	str	r3, [r2, #0]

			HW_REG(RTC+RTC_CRL) &= ~(ENTER_CONFIGURATION_MODE);
 80001aa:	4b11      	ldr	r3, [pc, #68]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a10      	ldr	r2, [pc, #64]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001b0:	f023 0310 	bic.w	r3, r3, #16
 80001b4:	6013      	str	r3, [r2, #0]
			while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 80001b6:	bf00      	nop
 80001b8:	4b0d      	ldr	r3, [pc, #52]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f003 0320 	and.w	r3, r3, #32
 80001c0:	2b20      	cmp	r3, #32
 80001c2:	d1f9      	bne.n	80001b8 <RTCAlarm_IRQHandler+0x48>
		}

		HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 80001c4:	4b0a      	ldr	r3, [pc, #40]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a09      	ldr	r2, [pc, #36]	@ (80001f0 <RTCAlarm_IRQHandler+0x80>)
 80001ca:	f023 0302 	bic.w	r3, r3, #2
 80001ce:	6013      	str	r3, [r2, #0]
		HW_REG(EXTI+EXTI_PR) |= (1<<17);
 80001d0:	4b0a      	ldr	r3, [pc, #40]	@ (80001fc <RTCAlarm_IRQHandler+0x8c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a09      	ldr	r2, [pc, #36]	@ (80001fc <RTCAlarm_IRQHandler+0x8c>)
 80001d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001da:	6013      	str	r3, [r2, #0]
		HW_REG(RTC+RTC_CRH) |= RTC_CRH_ALRIE;
 80001dc:	4b08      	ldr	r3, [pc, #32]	@ (8000200 <RTCAlarm_IRQHandler+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a07      	ldr	r2, [pc, #28]	@ (8000200 <RTCAlarm_IRQHandler+0x90>)
 80001e2:	f043 0302 	orr.w	r3, r3, #2
 80001e6:	6013      	str	r3, [r2, #0]
	}
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	40002804 	.word	0x40002804
 80001f4:	40002820 	.word	0x40002820
 80001f8:	40002824 	.word	0x40002824
 80001fc:	40010414 	.word	0x40010414
 8000200:	40002800 	.word	0x40002800

08000204 <SPI1_IRQHandler>:

void __attribute__((weak)) SPI1_IRQHandler(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

}
 8000208:	bf00      	nop
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <DMA1_Channel2_IRQHandler>:

void __attribute__((weak)) DMA1_Channel2_IRQHandler(void){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
 8000214:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <DMA1_Channel2_IRQHandler+0x14>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a02      	ldr	r2, [pc, #8]	@ (8000224 <DMA1_Channel2_IRQHandler+0x14>)
 800021a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800021e:	6013      	str	r3, [r2, #0]
	while(1){};
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <DMA1_Channel2_IRQHandler+0x10>
 8000224:	4001100c 	.word	0x4001100c

08000228 <DMA1_Channel3_IRQHandler>:
	if((HW_REG(DMA1+DMA_ISR)>>4) & DMA_ISR_TCIFx){
		HW_REG(DMA1+DMA_IFCR) &= DMA_IFCR_CTCIFx<<4;
	}
}

void DMA1_Channel3_IRQHandler(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	//HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_HTIFx){
 800022c:	4b0d      	ldr	r3, [pc, #52]	@ (8000264 <DMA1_Channel3_IRQHandler+0x3c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000234:	2b00      	cmp	r3, #0
 8000236:	d005      	beq.n	8000244 <DMA1_Channel3_IRQHandler+0x1c>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CHTIFx<<8;
 8000238:	4b0b      	ldr	r3, [pc, #44]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0a      	ldr	r2, [pc, #40]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 800023e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000242:	6013      	str	r3, [r2, #0]
	}
	if((HW_REG(DMA1+DMA_ISR)>>8) & DMA_ISR_TCIFx){
 8000244:	4b07      	ldr	r3, [pc, #28]	@ (8000264 <DMA1_Channel3_IRQHandler+0x3c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800024c:	2b00      	cmp	r3, #0
 800024e:	d005      	beq.n	800025c <DMA1_Channel3_IRQHandler+0x34>
		HW_REG(DMA1+DMA_IFCR) |= DMA_IFCR_CTCIFx<<8;
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a04      	ldr	r2, [pc, #16]	@ (8000268 <DMA1_Channel3_IRQHandler+0x40>)
 8000256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800025a:	6013      	str	r3, [r2, #0]
	}
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40020000 	.word	0x40020000
 8000268:	40020004 	.word	0x40020004

0800026c <gpio_init_config>:

#define I2C_CLK				PB6_CNF_MODE
#define I2C_SDA				PB7_CNF_MODE
// end I2C pins

void __attribute__((weak)) gpio_init_config(){
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOCEEN_CLOCK_ENABLE);	//Enable GPIOC Clock
 8000270:	4b30      	ldr	r3, [pc, #192]	@ (8000334 <gpio_init_config+0xc8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a2f      	ldr	r2, [pc, #188]	@ (8000334 <gpio_init_config+0xc8>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_BSRR) = PC13;	//Reset C13
 800027c:	4b2e      	ldr	r3, [pc, #184]	@ (8000338 <gpio_init_config+0xcc>)
 800027e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000282:	601a      	str	r2, [r3, #0]

	//  Analog mode all
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xFFFF);
	//HW_REG(GPIO_C+GPIOx_CRL) &= ~(0xFFFF);

	HW_REG(GPIO_C+GPIOx_CRH) &= ~(0xF<<20);	//Set C13 as Output
 8000284:	4b2d      	ldr	r3, [pc, #180]	@ (800033c <gpio_init_config+0xd0>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a2c      	ldr	r2, [pc, #176]	@ (800033c <gpio_init_config+0xd0>)
 800028a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800028e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_C+GPIOx_CRH) |= (0x2<<20);	//Set C13 max speed 2MHz
 8000290:	4b2a      	ldr	r3, [pc, #168]	@ (800033c <gpio_init_config+0xd0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a29      	ldr	r2, [pc, #164]	@ (800033c <gpio_init_config+0xd0>)
 8000296:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800029a:	6013      	str	r3, [r2, #0]
	// Exemplo para restaurar pinos PC14/15 ao estado adequado (modo analógico)
	//HW_REG(GPIO_C+GPIOx_CRH) &= ~((0xF << ((14 - 8) * 4)) | (0xF << ((15 - 8) * 4)));
	//HW_REG(GPIO_C+GPIOx_CRH) |= ((0x0 << ((14 - 8) * 4)) | (0x0 << ((15 - 8) * 4))); // Analog input

	// SPI configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOAEEN_CLOCK_ENABLE);	// Enable GPIOA Clock
 800029c:	4b25      	ldr	r3, [pc, #148]	@ (8000334 <gpio_init_config+0xc8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a24      	ldr	r2, [pc, #144]	@ (8000334 <gpio_init_config+0xc8>)
 80002a2:	f043 0304 	orr.w	r3, r3, #4
 80002a6:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) &= ~(0xFFFFF000);			// Clear CNF and MODE A7-A2
 80002a8:	4b25      	ldr	r3, [pc, #148]	@ (8000340 <gpio_init_config+0xd4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a24      	ldr	r2, [pc, #144]	@ (8000340 <gpio_init_config+0xd4>)
 80002ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80002b2:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_ODR) &= ~PA3;			// Reset A3
 80002b4:	4b23      	ldr	r3, [pc, #140]	@ (8000344 <gpio_init_config+0xd8>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a22      	ldr	r2, [pc, #136]	@ (8000344 <gpio_init_config+0xd8>)
 80002ba:	f023 0308 	bic.w	r3, r3, #8
 80002be:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= PA3_CNF_MODE;	// CE
 80002c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000340 <gpio_init_config+0xd4>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000340 <gpio_init_config+0xd4>)
 80002c6:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80002ca:	6013      	str	r3, [r2, #0]

	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_CLK;	// CLK Master Alternate function push-pull
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <gpio_init_config+0xd4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000340 <gpio_init_config+0xd4>)
 80002d2:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 80002d6:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MOSI;	// MOSI Full duplex / master Alternate function push-pull
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <gpio_init_config+0xd4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a18      	ldr	r2, [pc, #96]	@ (8000340 <gpio_init_config+0xd4>)
 80002de:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 80002e2:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_MISO;	// MISO Full duplex / master Input floating / Input pull-up
 80002e4:	4b16      	ldr	r3, [pc, #88]	@ (8000340 <gpio_init_config+0xd4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a15      	ldr	r2, [pc, #84]	@ (8000340 <gpio_init_config+0xd4>)
 80002ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80002ee:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_A+GPIOx_CRL) |= SPI1_NSS;	// NSS Software
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <gpio_init_config+0xd4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <gpio_init_config+0xd4>)
 80002f6:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80002fa:	6013      	str	r3, [r2, #0]
	// afio_init_config();

	// I2C configuration
	ENABLE_CLOCK_APB2(RCC_APB2ENR_IOBEEN_CLOCK_ENABLE);	// Enable GPIOB Clock
 80002fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000334 <gpio_init_config+0xc8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0c      	ldr	r2, [pc, #48]	@ (8000334 <gpio_init_config+0xc8>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) &= ~(0xFF000000);			// Clear CNF and MODE B7-B6
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <gpio_init_config+0xdc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <gpio_init_config+0xdc>)
 800030e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000312:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) |= I2C_CLK;	// I2C clock Alternate function open drain
 8000314:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <gpio_init_config+0xdc>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0b      	ldr	r2, [pc, #44]	@ (8000348 <gpio_init_config+0xdc>)
 800031a:	f043 6370 	orr.w	r3, r3, #251658240	@ 0xf000000
 800031e:	6013      	str	r3, [r2, #0]
	HW_REG(GPIO_B+GPIOx_CRL) |= I2C_SDA;	// I2C Data I/O Alternate function open drain
 8000320:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <gpio_init_config+0xdc>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a08      	ldr	r2, [pc, #32]	@ (8000348 <gpio_init_config+0xdc>)
 8000326:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800032a:	6013      	str	r3, [r2, #0]
	// afio_init_config();
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021018 	.word	0x40021018
 8000338:	40011010 	.word	0x40011010
 800033c:	40011004 	.word	0x40011004
 8000340:	40010800 	.word	0x40010800
 8000344:	4001080c 	.word	0x4001080c
 8000348:	40010c00 	.word	0x40010c00

0800034c <i2c_init_config>:
}

void i2c_dma_config(){
}

void i2c_init_config(){
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
	ENABLE_CLOCK_APB1(RCC_APB1ENR_I2C1EN_CLOCK_ENABLE);
 8000350:	4b23      	ldr	r3, [pc, #140]	@ (80003e0 <i2c_init_config+0x94>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a22      	ldr	r2, [pc, #136]	@ (80003e0 <i2c_init_config+0x94>)
 8000356:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800035a:	6013      	str	r3, [r2, #0]
	HW_REG(I2C1+I2C_CR1) |= I2C_CR1_SWRST_UNDER_RESET;
 800035c:	4b21      	ldr	r3, [pc, #132]	@ (80003e4 <i2c_init_config+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <i2c_init_config+0x98>)
 8000362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000366:	6013      	str	r3, [r2, #0]
	HW_REG(I2C1+I2C_CR1) &= ~I2C_CR1_SWRST_UNDER_RESET;
 8000368:	4b1e      	ldr	r3, [pc, #120]	@ (80003e4 <i2c_init_config+0x98>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a1d      	ldr	r2, [pc, #116]	@ (80003e4 <i2c_init_config+0x98>)
 800036e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000372:	6013      	str	r3, [r2, #0]

	HW_REG(I2C1+I2C_CR2) &= ~I2C_CR2_FREQ;	// Set APB1 clock frequency
 8000374:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <i2c_init_config+0x9c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1b      	ldr	r2, [pc, #108]	@ (80003e8 <i2c_init_config+0x9c>)
 800037a:	f023 031f 	bic.w	r3, r3, #31
 800037e:	6013      	str	r3, [r2, #0]
	HW_REG(I2C1+I2C_CR2) |= (8<<0);
 8000380:	4b19      	ldr	r3, [pc, #100]	@ (80003e8 <i2c_init_config+0x9c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a18      	ldr	r2, [pc, #96]	@ (80003e8 <i2c_init_config+0x9c>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6013      	str	r3, [r2, #0]

	HW_REG(I2C1+I2C_CCR) &= ~I2C_CCR_FS_FAST_MODE_I2C;
 800038c:	4b17      	ldr	r3, [pc, #92]	@ (80003ec <i2c_init_config+0xa0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a16      	ldr	r2, [pc, #88]	@ (80003ec <i2c_init_config+0xa0>)
 8000392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000396:	6013      	str	r3, [r2, #0]
	HW_REG(I2C1+I2C_CCR) &= ~I2C_CCR_CCR;
 8000398:	4b14      	ldr	r3, [pc, #80]	@ (80003ec <i2c_init_config+0xa0>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a13      	ldr	r2, [pc, #76]	@ (80003ec <i2c_init_config+0xa0>)
 800039e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80003a2:	f023 030f 	bic.w	r3, r3, #15
 80003a6:	6013      	str	r3, [r2, #0]
	// ((4*10^(-6)) + (1000*10^(-9)) )/(1/(8*10^6)) 40
	HW_REG(I2C1+I2C_CCR) |= (40<<0);	// ((4ms) + (1ms) )/(1/(8ms)) 40 Set clock control register for 100KHz in Standard mode
 80003a8:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <i2c_init_config+0xa0>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0f      	ldr	r2, [pc, #60]	@ (80003ec <i2c_init_config+0xa0>)
 80003ae:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80003b2:	6013      	str	r3, [r2, #0]

	HW_REG(I2C1+I2C_TRISE) &= ~I2C_TRISE_TRISE;
 80003b4:	4b0e      	ldr	r3, [pc, #56]	@ (80003f0 <i2c_init_config+0xa4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0d      	ldr	r2, [pc, #52]	@ (80003f0 <i2c_init_config+0xa4>)
 80003ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80003be:	6013      	str	r3, [r2, #0]
	// (1*10^(-6))/(1/(8*10^6)) + 1
	HW_REG(I2C1+I2C_TRISE) |= (9<<0);	// (1ms)/(1/(8ms)) + 1 Set maximum rise time
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <i2c_init_config+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <i2c_init_config+0xa4>)
 80003c6:	f043 0309 	orr.w	r3, r3, #9
 80003ca:	6013      	str	r3, [r2, #0]

	HW_REG(I2C1+I2C_CR1) |= I2C_CR1_PE_ENABLE;
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <i2c_init_config+0x98>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <i2c_init_config+0x98>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	4002101c 	.word	0x4002101c
 80003e4:	40005400 	.word	0x40005400
 80003e8:	40005404 	.word	0x40005404
 80003ec:	4000541c 	.word	0x4000541c
 80003f0:	40005420 	.word	0x40005420

080003f4 <i2c_start>:

void i2c_start(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	HW_REG(I2C1+I2C_CR1) |= I2C_CR1_START;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <i2c_start+0x28>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a07      	ldr	r2, [pc, #28]	@ (800041c <i2c_start+0x28>)
 80003fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000402:	6013      	str	r3, [r2, #0]
	while(!(HW_REG(I2C1+I2C_SR1) & I2C_SR1_SB)){};
 8000404:	bf00      	nop
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <i2c_start+0x2c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <i2c_start+0x12>
}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	40005400 	.word	0x40005400
 8000420:	40005414 	.word	0x40005414

08000424 <i2c_stop>:

void i2c_stop(){
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	HW_REG(I2C1+I2C_CR1) |= I2C_CR1_STOP;
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <i2c_stop+0x18>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a03      	ldr	r2, [pc, #12]	@ (800043c <i2c_stop+0x18>)
 800042e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40005400 	.word	0x40005400

08000440 <i2c_set_address>:

void i2c_set_address(unsigned char addr){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
	//HW_REG(I2C1+I2C_DR) &= ~(0x00FF);
	HW_REG(I2C1+I2C_DR) = addr<<1;	// Write
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <i2c_set_address+0x34>)
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	6013      	str	r3, [r2, #0]

	while(!(HW_REG(I2C1+I2C_SR1) & I2C_SR1_ADDR_ADDRESS_MATCHED)){};
 8000452:	bf00      	nop
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <i2c_set_address+0x38>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f003 0302 	and.w	r3, r3, #2
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f9      	beq.n	8000454 <i2c_set_address+0x14>
	HW_REG(I2C1+I2C_SR1);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <i2c_set_address+0x38>)
 8000462:	681b      	ldr	r3, [r3, #0]
	HW_REG(I2C1+I2C_SR2);
 8000464:	4b05      	ldr	r3, [pc, #20]	@ (800047c <i2c_set_address+0x3c>)
 8000466:	681b      	ldr	r3, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40005410 	.word	0x40005410
 8000478:	40005414 	.word	0x40005414
 800047c:	40005418 	.word	0x40005418

08000480 <i2c_transmit_data>:

unsigned char i2c_transmit_data(unsigned char* tx_data, int size){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]

	unsigned int i=0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
	for(;i<size;){
 800048e:	e019      	b.n	80004c4 <i2c_transmit_data+0x44>
		// Enquanto o buffer estiver cheio
		while(!(HW_REG(I2C1+I2C_SR1) & I2C_SR1_TXE_EMPTY)){};
 8000490:	bf00      	nop
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <i2c_transmit_data+0x68>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <i2c_transmit_data+0x12>
		HW_REG(I2C1+I2C_DR) &= ~(0x00FF);
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <i2c_transmit_data+0x6c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a12      	ldr	r2, [pc, #72]	@ (80004ec <i2c_transmit_data+0x6c>)
 80004a4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80004a8:	6013      	str	r3, [r2, #0]
		HW_REG(I2C1+I2C_DR) |= tx_data[i];
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <i2c_transmit_data+0x6c>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	68fa      	ldr	r2, [r7, #12]
 80004b2:	440a      	add	r2, r1
 80004b4:	7812      	ldrb	r2, [r2, #0]
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a0c      	ldr	r2, [pc, #48]	@ (80004ec <i2c_transmit_data+0x6c>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6013      	str	r3, [r2, #0]
		++i;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
	for(;i<size;){
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d3e1      	bcc.n	8000490 <i2c_transmit_data+0x10>
	}
	while(!(HW_REG(I2C1+I2C_SR1) & I2C_SR1_BTF_TRANSFER_SUCCEEDED)){};
 80004cc:	bf00      	nop
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <i2c_transmit_data+0x68>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f003 0304 	and.w	r3, r3, #4
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d0f9      	beq.n	80004ce <i2c_transmit_data+0x4e>

	return 1;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40005414 	.word	0x40005414
 80004ec:	40005410 	.word	0x40005410

080004f0 <main>:
unsigned char rx_address[5] = {0xEE, 0xDD, 0xCC, 0xBB, 0xAA};
unsigned char tx_data[] = "HELLO WORLD\n";
unsigned char rx_data[32] = {};

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
	__UNUSED(data) = ((int)&_edata) - (int)&_sdata;
 80004f6:	4a2f      	ldr	r2, [pc, #188]	@ (80005b4 <main+0xc4>)
 80004f8:	4b2f      	ldr	r3, [pc, #188]	@ (80005b8 <main+0xc8>)
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	61bb      	str	r3, [r7, #24]
	__UNUSED(bss) = ((int)&_ebss) - (int)&_sdata;
 80004fe:	4a2f      	ldr	r2, [pc, #188]	@ (80005bc <main+0xcc>)
 8000500:	4b2d      	ldr	r3, [pc, #180]	@ (80005b8 <main+0xc8>)
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
	__UNUSED(size_app) = ((int)&_eflash) - (int)&_sflash;
 8000506:	4a2e      	ldr	r2, [pc, #184]	@ (80005c0 <main+0xd0>)
 8000508:	4b2e      	ldr	r3, [pc, #184]	@ (80005c4 <main+0xd4>)
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	613b      	str	r3, [r7, #16]
	__UNUSED(bank) = size_app/1024;
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	2b00      	cmp	r3, #0
 8000512:	da01      	bge.n	8000518 <main+0x28>
 8000514:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8000518:	129b      	asrs	r3, r3, #10
 800051a:	60fb      	str	r3, [r7, #12]
	__UNUSED(setor) = size_app%1024;
 800051c:	693b      	ldr	r3, [r7, #16]
 800051e:	425a      	negs	r2, r3
 8000520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000524:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000528:	bf58      	it	pl
 800052a:	4253      	negpl	r3, r2
 800052c:	60bb      	str	r3, [r7, #8]

	system_clock_config();
 800052e:	f000 f885 	bl	800063c <system_clock_config>
	gpio_init_config();
 8000532:	f7ff fe9b 	bl	800026c <gpio_init_config>
	//spi_init_config();
	//spi_interrupt_config()
	//spi_dma_config();
	//dma_init_config();
	//unsigned int ads = SPI1+SPI_DR;
	ENABLE_SPE_SPI();
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <main+0xd8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <main+0xd8>)
 800053c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000540:	6013      	str	r3, [r2, #0]
	//dma_set_channel_config(2, SPI1+SPI_DR, (unsigned int)tx_data, 12);

	secondary_clock_config();
 8000542:	f000 f881 	bl	8000648 <secondary_clock_config>
	//watchdog_init_config();

	rtc_init_config();
 8000546:	f000 f921 	bl	800078c <rtc_init_config>
	rtc_set_config();
 800054a:	f000 f94b 	bl	80007e4 <rtc_set_config>
		HW_REG(RCCA+RCC_CSR) |= 1<<24;
		//HW_REG(GPIO_C+GPIOx_BSRR) = (1<<29);	//Set C13
		//for(int i=0;i<100000;i++);
	}
	*/
	__SUPPRESS_UNUSED(volatile int standbymode = 0;);
 800054e:	2300      	movs	r3, #0
 8000550:	603b      	str	r3, [r7, #0]
	if((HW_REG(PWR+PWR_CSR) & PWR_CSR_SBF) == PWR_CSR_SBF){
 8000552:	4b1e      	ldr	r3, [pc, #120]	@ (80005cc <main+0xdc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b02      	cmp	r3, #2
 800055c:	d109      	bne.n	8000572 <main+0x82>
		standbymode = 1;
 800055e:	2301      	movs	r3, #1
 8000560:	603b      	str	r3, [r7, #0]
		HW_REG(PWR+PWR_CR) |= PWR_CR_CSBF;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <main+0xe0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <main+0xe0>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6013      	str	r3, [r2, #0]
		//HW_REG(GPIO_C+GPIOx_BSRR) = (1<<13);	//Reset C13
		//for(int i=0;i<100000;i++);/*Delay*/
		//HW_REG(GPIO_C+GPIOx_BSRR) = (1<<29);	//Set C13
		//for(int i=0;i<100000;i++);/*Delay*/

		stop_mode();
 800056e:	f000 f835 	bl	80005dc <stop_mode>
	{
		nrf24_receive(rx_data);
		HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Set C13
	}
	*/
	i2c_init_config();
 8000572:	f7ff feeb 	bl	800034c <i2c_init_config>
	i2c_start();
 8000576:	f7ff ff3d 	bl	80003f4 <i2c_start>
	i2c_set_address(0x38);
 800057a:	2038      	movs	r0, #56	@ 0x38
 800057c:	f7ff ff60 	bl	8000440 <i2c_set_address>
	i2c_transmit_data(tx_data, 1);
 8000580:	2101      	movs	r1, #1
 8000582:	4814      	ldr	r0, [pc, #80]	@ (80005d4 <main+0xe4>)
 8000584:	f7ff ff7c 	bl	8000480 <i2c_transmit_data>
	i2c_stop();
 8000588:	f7ff ff4c 	bl	8000424 <i2c_stop>
	/*
	*/
    /* Loop forever */
	uint32_t last_time = rtc_get_time();
 800058c:	f000 f8dc 	bl	8000748 <rtc_get_time>
 8000590:	61f8      	str	r0, [r7, #28]
		//for(int i=0;i<100000;i++);/*Delay*/
		//sleep_mode();
		//stop_mode();
		//standby_mode();

		uint32_t now = rtc_get_time();
 8000592:	f000 f8d9 	bl	8000748 <rtc_get_time>
 8000596:	6078      	str	r0, [r7, #4]
		if ((now - last_time) >= 1) {
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	429a      	cmp	r2, r3
 800059e:	d0f8      	beq.n	8000592 <main+0xa2>
				nrf24_receive(rx_data);
				HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
			}
			*/

			HW_REG(GPIO_C+GPIOx_ODR) ^= (1<<13);	//Toggle C13
 80005a0:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <main+0xe8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0c      	ldr	r2, [pc, #48]	@ (80005d8 <main+0xe8>)
 80005a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80005aa:	6013      	str	r3, [r2, #0]
			last_time = now;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	61fb      	str	r3, [r7, #28]
	{
 80005b0:	e7ef      	b.n	8000592 <main+0xa2>
 80005b2:	bf00      	nop
 80005b4:	20000010 	.word	0x20000010
 80005b8:	20000000 	.word	0x20000000
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	0800096c 	.word	0x0800096c
 80005c4:	08000000 	.word	0x08000000
 80005c8:	40013000 	.word	0x40013000
 80005cc:	40007004 	.word	0x40007004
 80005d0:	40007000 	.word	0x40007000
 80005d4:	20000000 	.word	0x20000000
 80005d8:	4001100c 	.word	0x4001100c

080005dc <stop_mode>:
static __attribute__((used)) void sleep_mode(){
	HW_REG(SCB+SCB_SCR) &= ~SCB_SCR_SLEEPDEEP; //Clear DEEPSLEEP
	__WFI();
}

static __attribute__((used)) void stop_mode(){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	HW_REG(SCB+SCB_SCR) |= SCB_SCR_SLEEPDEEP; //Set DEEPSLEEP
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <stop_mode+0x50>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a11      	ldr	r2, [pc, #68]	@ (800062c <stop_mode+0x50>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6013      	str	r3, [r2, #0]
	HW_REG(PWR+PWR_CR) &= ~PWR_CR_PDDS;	//Clear PDDS
 80005ec:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <stop_mode+0x54>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0f      	ldr	r2, [pc, #60]	@ (8000630 <stop_mode+0x54>)
 80005f2:	f023 0302 	bic.w	r3, r3, #2
 80005f6:	6013      	str	r3, [r2, #0]
	HW_REG(PWR+PWR_CR) &= ~PWR_CR_LPDS;	// Voltage regulator on during Stop mode
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <stop_mode+0x54>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <stop_mode+0x54>)
 80005fe:	f023 0301 	bic.w	r3, r3, #1
 8000602:	6013      	str	r3, [r2, #0]
	//HW_REG(PWR+PWR_CR) |= PWR_CR_LPDS;	//Voltage regulator in low-power mode
	HW_REG(EXTI+EXTI_PR) |= 0x000FFFFF;
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <stop_mode+0x58>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <stop_mode+0x58>)
 800060a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800060e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000612:	6013      	str	r3, [r2, #0]
	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <stop_mode+0x5c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <stop_mode+0x5c>)
 800061a:	f023 0302 	bic.w	r3, r3, #2
 800061e:	6013      	str	r3, [r2, #0]
	__WFI();
 8000620:	bf30      	wfi
}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed10 	.word	0xe000ed10
 8000630:	40007000 	.word	0x40007000
 8000634:	40010414 	.word	0x40010414
 8000638:	40002804 	.word	0x40002804

0800063c <system_clock_config>:
	int ahp;
	int apb1;	// 35MHz max
	int apb2;	// 72MHz max
}all_clock_typedef;

void __attribute__((weak)) system_clock_config(){
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	//HW_REG(RCCA+RCC_CFGR) |= RCC_CFGR_HPRE_SYSCLK_DIV4;	//SYSCLK divided by 4
	//4MHz

	//HW_REG(RCCA+RCC_CFGR) |= RCC_CFGR_SW_PLL;
	//while((HW_REG(RCCA+RCC_CFGR) & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <secondary_clock_config>:

void __attribute__((weak)) secondary_clock_config(){
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
	HW_REG(RCCA+RCC_APB1ENR) |= RCC_PWREN_CLOCK_ENABLE;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <secondary_clock_config+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a16      	ldr	r2, [pc, #88]	@ (80006ac <secondary_clock_config+0x64>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA+RCC_APB1ENR) |= RCC_BKPEN_CLOCK_ENABLE;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <secondary_clock_config+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <secondary_clock_config+0x64>)
 800065e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000662:	6013      	str	r3, [r2, #0]

	HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <secondary_clock_config+0x68>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a11      	ldr	r2, [pc, #68]	@ (80006b0 <secondary_clock_config+0x68>)
 800066a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800066e:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA + RCC_BDCR) |= (1<<16);
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <secondary_clock_config+0x6c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <secondary_clock_config+0x6c>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800067a:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA + RCC_BDCR) &= ~(1<<16);
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <secondary_clock_config+0x6c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0c      	ldr	r2, [pc, #48]	@ (80006b4 <secondary_clock_config+0x6c>)
 8000682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000686:	6013      	str	r3, [r2, #0]

	HW_REG(RCCA+RCC_CSR) |= RCC_CSR_LSION_OSCILLATOR_ON;
 8000688:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <secondary_clock_config+0x70>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <secondary_clock_config+0x70>)
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	6013      	str	r3, [r2, #0]
	while((HW_REG(RCCA+RCC_CSR) & RCC_CSR_LSIRDY) != RCC_CSR_LSIRDY);
 8000694:	bf00      	nop
 8000696:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <secondary_clock_config+0x70>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d1f9      	bne.n	8000696 <secondary_clock_config+0x4e>

	//HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_LSEON_OSCILLATOR_ON;
	//while((HW_REG(RCCA+RCC_BDCR) & RCC_BDCR_LSERDY) != RCC_BDCR_LSERDY);
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	4002101c 	.word	0x4002101c
 80006b0:	40007000 	.word	0x40007000
 80006b4:	40021020 	.word	0x40021020
 80006b8:	40021024 	.word	0x40021024

080006bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db0b      	blt.n	80006e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	f003 021f 	and.w	r2, r3, #31
 80006d4:	4906      	ldr	r1, [pc, #24]	@ (80006f0 <__NVIC_EnableIRQ+0x34>)
 80006d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006da:	095b      	lsrs	r3, r3, #5
 80006dc:	2001      	movs	r0, #1
 80006de:	fa00 f202 	lsl.w	r2, r0, r2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	db0a      	blt.n	800071e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	b2da      	uxtb	r2, r3
 800070c:	490c      	ldr	r1, [pc, #48]	@ (8000740 <__NVIC_SetPriority+0x4c>)
 800070e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000712:	0112      	lsls	r2, r2, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	440b      	add	r3, r1
 8000718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800071c:	e00a      	b.n	8000734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4908      	ldr	r1, [pc, #32]	@ (8000744 <__NVIC_SetPriority+0x50>)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	f003 030f 	and.w	r3, r3, #15
 800072a:	3b04      	subs	r3, #4
 800072c:	0112      	lsls	r2, r2, #4
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	440b      	add	r3, r1
 8000732:	761a      	strb	r2, [r3, #24]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <rtc_get_time>:
#include "EXTI_utils.h"

void __attribute__((weak)) rtc_init_config();
void __attribute__((weak)) rtc_set_config();

unsigned int __attribute__((weak)) rtc_get_time() {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
	unsigned int high1 = HW_REG(RTC+RTC_CNTH);
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <rtc_get_time+0x3c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	60fb      	str	r3, [r7, #12]
	unsigned int low = HW_REG(RTC+RTC_CNTL);
 8000754:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <rtc_get_time+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	60bb      	str	r3, [r7, #8]
	unsigned int high2 = HW_REG(RTC+RTC_CNTH);
 800075a:	4b0a      	ldr	r3, [pc, #40]	@ (8000784 <rtc_get_time+0x3c>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	607b      	str	r3, [r7, #4]
    if (high1 != high2) {
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	d004      	beq.n	8000772 <rtc_get_time+0x2a>
        low = HW_REG(RTC+RTC_CNTL);
 8000768:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <rtc_get_time+0x40>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	60bb      	str	r3, [r7, #8]
        high1 = high2;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	60fb      	str	r3, [r7, #12]
    }
    return (high1 << 16) | low;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	041a      	lsls	r2, r3, #16
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	4313      	orrs	r3, r2
}
 800077a:	4618      	mov	r0, r3
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	40002818 	.word	0x40002818
 8000788:	4000281c 	.word	0x4000281c

0800078c <rtc_init_config>:

void rtc_init_config(){
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	//HW_REG(RCCA+RCC_APB1ENR) |= RCC_BKPEN_CLOCK_ENABLE;

	//HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
	//HW_REG(RCCA + RCC_BDCR) |= (1<<16);

	HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_RTCSEL_LSI;
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <rtc_init_config+0x4c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <rtc_init_config+0x4c>)
 8000796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800079a:	6013      	str	r3, [r2, #0]
	HW_REG(RCCA+RCC_BDCR) |= RCC_BDCR_RTCEN_RTC_CLOCK_ENABLE;
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <rtc_init_config+0x4c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0d      	ldr	r2, [pc, #52]	@ (80007d8 <rtc_init_config+0x4c>)
 80007a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007a6:	6013      	str	r3, [r2, #0]
	//HW_REG(RCCA+RCC_CSR) &= ~RCC_CSR_LSION_OSCILLATOR_ON;

	HW_REG(EXTI+EXTI_RTSR) |= EXTI_IMR_MR17;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <rtc_init_config+0x50>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a0b      	ldr	r2, [pc, #44]	@ (80007dc <rtc_init_config+0x50>)
 80007ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007b2:	6013      	str	r3, [r2, #0]

	HW_REG(EXTI+EXTI_IMR) |= EXTI_IMR_MR17;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <rtc_init_config+0x54>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a09      	ldr	r2, [pc, #36]	@ (80007e0 <rtc_init_config+0x54>)
 80007ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007be:	6013      	str	r3, [r2, #0]
	//HW_REG(EXTI+EXTI_FTSR) |= EXTI_IMR_MR17;


	//HW_REG(PWR+PWR_CSR) |= PWR_CSR_EWUP;

	NVIC_SetPriority(RTCAlarm_IRQ,0x10); // Priority level 1
 80007c0:	2110      	movs	r1, #16
 80007c2:	2029      	movs	r0, #41	@ 0x29
 80007c4:	f7ff ff96 	bl	80006f4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(RTCAlarm_IRQ);	// Enable EXTI17 interrupt on NVIC
 80007c8:	2029      	movs	r0, #41	@ 0x29
 80007ca:	f7ff ff77 	bl	80006bc <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80007ce:	b662      	cpsie	i
}
 80007d0:	bf00      	nop

	__enable_irq();
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021020 	.word	0x40021020
 80007dc:	40010408 	.word	0x40010408
 80007e0:	40010400 	.word	0x40010400

080007e4 <rtc_set_config>:

void rtc_set_config(){
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
	//HW_REG(PWR + PWR_CR) |= PWR_CR_DBP;
	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_RSF; //Clear RSF
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <rtc_set_config+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000898 <rtc_set_config+0xb4>)
 80007ee:	f023 0308 	bic.w	r3, r3, #8
 80007f2:	6013      	str	r3, [r2, #0]
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RSF) != RTC_CRL_RSF);
 80007f4:	bf00      	nop
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <rtc_set_config+0xb4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f003 0308 	and.w	r3, r3, #8
 80007fe:	2b08      	cmp	r3, #8
 8000800:	d1f9      	bne.n	80007f6 <rtc_set_config+0x12>

	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 8000802:	bf00      	nop
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <rtc_set_config+0xb4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	2b20      	cmp	r3, #32
 800080e:	d1f9      	bne.n	8000804 <rtc_set_config+0x20>
	HW_REG(RTC+RTC_CRL) |= (ENTER_CONFIGURATION_MODE); //To write RTC_PRL, RTC_CNT, RTC_ALR
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <rtc_set_config+0xb4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <rtc_set_config+0xb4>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6013      	str	r3, [r2, #0]



	//HW_REG(RTC+RTC_PRLH) = 0;	//Only write
	HW_REG(RTC+RTC_PRLL) = ((FREQ_40KHz+1)/2)-1;	//Only write
 800081c:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <rtc_set_config+0xb8>)
 800081e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000822:	601a      	str	r2, [r3, #0]
	//HW_REG(RTC+RTC_DIVL);	//Only read

	//HW_REG(RTC+RTC_CNTH) = 0;	//RW
	//HW_REG(RTC+RTC_CNTL) = 0;	//RW

	HW_REG(RTC+RTC_ALRH) = 0;	//Only Write
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <rtc_set_config+0xbc>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
	HW_REG(RTC+RTC_ALRL) = HW_REG(RTC+RTC_ALRL) + 1;	//Only Write
 800082a:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <rtc_set_config+0xc0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a1d      	ldr	r2, [pc, #116]	@ (80008a4 <rtc_set_config+0xc0>)
 8000830:	3301      	adds	r3, #1
 8000832:	6013      	str	r3, [r2, #0]

	HW_REG(RTC+RTC_CRL) &= ~(ENTER_CONFIGURATION_MODE);
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <rtc_set_config+0xb4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <rtc_set_config+0xb4>)
 800083a:	f023 0310 	bic.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RTOFF) != RTC_CRL_RTOFF);
 8000840:	bf00      	nop
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <rtc_set_config+0xb4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	2b20      	cmp	r3, #32
 800084c:	d1f9      	bne.n	8000842 <rtc_set_config+0x5e>

	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_ALRF;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <rtc_set_config+0xb4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <rtc_set_config+0xb4>)
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	6013      	str	r3, [r2, #0]
	HW_REG(EXTI+EXTI_PR) |= (1<<17);
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <rtc_set_config+0xc4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a12      	ldr	r2, [pc, #72]	@ (80008a8 <rtc_set_config+0xc4>)
 8000860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000864:	6013      	str	r3, [r2, #0]
	HW_REG(RTC+RTC_CRH) |= RTC_CRH_ALRIE;	//RW active or not interrupt
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <rtc_set_config+0xc8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <rtc_set_config+0xc8>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6013      	str	r3, [r2, #0]

	HW_REG(RTC+RTC_CRL) &= ~RTC_CRL_RSF; //Clear RSF
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <rtc_set_config+0xb4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a08      	ldr	r2, [pc, #32]	@ (8000898 <rtc_set_config+0xb4>)
 8000878:	f023 0308 	bic.w	r3, r3, #8
 800087c:	6013      	str	r3, [r2, #0]
	//HW_REG(PWR + PWR_CR) &= ~PWR_CR_DBP;
	while((HW_REG(RTC+RTC_CRL) & RTC_CRL_RSF) != RTC_CRL_RSF);
 800087e:	bf00      	nop
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <rtc_set_config+0xb4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f003 0308 	and.w	r3, r3, #8
 8000888:	2b08      	cmp	r3, #8
 800088a:	d1f9      	bne.n	8000880 <rtc_set_config+0x9c>
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40002804 	.word	0x40002804
 800089c:	4000280c 	.word	0x4000280c
 80008a0:	40002820 	.word	0x40002820
 80008a4:	40002824 	.word	0x40002824
 80008a8:	40010414 	.word	0x40010414
 80008ac:	40002800 	.word	0x40002800

080008b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008b0:	480d      	ldr	r0, [pc, #52]	@ (80008e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b8:	480c      	ldr	r0, [pc, #48]	@ (80008ec <LoopForever+0x6>)
  ldr r1, =_edata
 80008ba:	490d      	ldr	r1, [pc, #52]	@ (80008f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008bc:	4a0d      	ldr	r2, [pc, #52]	@ (80008f4 <LoopForever+0xe>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c0:	e002      	b.n	80008c8 <LoopCopyDataInit>

080008c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c6:	3304      	adds	r3, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008cc:	d3f9      	bcc.n	80008c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ce:	4a0a      	ldr	r2, [pc, #40]	@ (80008f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d0:	4c0a      	ldr	r4, [pc, #40]	@ (80008fc <LoopForever+0x16>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d4:	e001      	b.n	80008da <LoopFillZerobss>

080008d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d8:	3204      	adds	r2, #4

080008da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008dc:	d3fb      	bcc.n	80008d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008de:	f000 f811 	bl	8000904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008e2:	f7ff fe05 	bl	80004f0 <main>

080008e6 <LoopForever>:

LoopForever:
  b LoopForever
 80008e6:	e7fe      	b.n	80008e6 <LoopForever>
  ldr   r0, =_estack
 80008e8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008f4:	0800096c 	.word	0x0800096c
  ldr r2, =_sbss
 80008f8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008fc:	2000002c 	.word	0x2000002c

08000900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC1_2_IRQHandler>
	...

08000904 <__libc_init_array>:
 8000904:	b570      	push	{r4, r5, r6, lr}
 8000906:	2600      	movs	r6, #0
 8000908:	4d0c      	ldr	r5, [pc, #48]	@ (800093c <__libc_init_array+0x38>)
 800090a:	4c0d      	ldr	r4, [pc, #52]	@ (8000940 <__libc_init_array+0x3c>)
 800090c:	1b64      	subs	r4, r4, r5
 800090e:	10a4      	asrs	r4, r4, #2
 8000910:	42a6      	cmp	r6, r4
 8000912:	d109      	bne.n	8000928 <__libc_init_array+0x24>
 8000914:	f000 f81a 	bl	800094c <_init>
 8000918:	2600      	movs	r6, #0
 800091a:	4d0a      	ldr	r5, [pc, #40]	@ (8000944 <__libc_init_array+0x40>)
 800091c:	4c0a      	ldr	r4, [pc, #40]	@ (8000948 <__libc_init_array+0x44>)
 800091e:	1b64      	subs	r4, r4, r5
 8000920:	10a4      	asrs	r4, r4, #2
 8000922:	42a6      	cmp	r6, r4
 8000924:	d105      	bne.n	8000932 <__libc_init_array+0x2e>
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f855 3b04 	ldr.w	r3, [r5], #4
 800092c:	4798      	blx	r3
 800092e:	3601      	adds	r6, #1
 8000930:	e7ee      	b.n	8000910 <__libc_init_array+0xc>
 8000932:	f855 3b04 	ldr.w	r3, [r5], #4
 8000936:	4798      	blx	r3
 8000938:	3601      	adds	r6, #1
 800093a:	e7f2      	b.n	8000922 <__libc_init_array+0x1e>
 800093c:	08000964 	.word	0x08000964
 8000940:	08000964 	.word	0x08000964
 8000944:	08000964 	.word	0x08000964
 8000948:	08000968 	.word	0x08000968

0800094c <_init>:
 800094c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094e:	bf00      	nop
 8000950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000952:	bc08      	pop	{r3}
 8000954:	469e      	mov	lr, r3
 8000956:	4770      	bx	lr

08000958 <_fini>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	bf00      	nop
 800095c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800095e:	bc08      	pop	{r3}
 8000960:	469e      	mov	lr, r3
 8000962:	4770      	bx	lr
